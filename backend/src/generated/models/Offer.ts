
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Offer` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Offer
 * 
 */
export type OfferModel = runtime.Types.Result.DefaultSelection<Prisma.$OfferPayload>

export type AggregateOffer = {
  _count: OfferCountAggregateOutputType | null
  _avg: OfferAvgAggregateOutputType | null
  _sum: OfferSumAggregateOutputType | null
  _min: OfferMinAggregateOutputType | null
  _max: OfferMaxAggregateOutputType | null
}

export type OfferAvgAggregateOutputType = {
  amount: number | null
}

export type OfferSumAggregateOutputType = {
  amount: number | null
}

export type OfferMinAggregateOutputType = {
  id: string | null
  rideId: string | null
  riderId: string | null
  amount: number | null
  accepted: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type OfferMaxAggregateOutputType = {
  id: string | null
  rideId: string | null
  riderId: string | null
  amount: number | null
  accepted: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type OfferCountAggregateOutputType = {
  id: number
  rideId: number
  riderId: number
  amount: number
  accepted: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type OfferAvgAggregateInputType = {
  amount?: true
}

export type OfferSumAggregateInputType = {
  amount?: true
}

export type OfferMinAggregateInputType = {
  id?: true
  rideId?: true
  riderId?: true
  amount?: true
  accepted?: true
  createdAt?: true
  updatedAt?: true
}

export type OfferMaxAggregateInputType = {
  id?: true
  rideId?: true
  riderId?: true
  amount?: true
  accepted?: true
  createdAt?: true
  updatedAt?: true
}

export type OfferCountAggregateInputType = {
  id?: true
  rideId?: true
  riderId?: true
  amount?: true
  accepted?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type OfferAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Offer to aggregate.
   */
  where?: Prisma.OfferWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Offers to fetch.
   */
  orderBy?: Prisma.OfferOrderByWithRelationInput | Prisma.OfferOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.OfferWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Offers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Offers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Offers
  **/
  _count?: true | OfferCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: OfferAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: OfferSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: OfferMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: OfferMaxAggregateInputType
}

export type GetOfferAggregateType<T extends OfferAggregateArgs> = {
      [P in keyof T & keyof AggregateOffer]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateOffer[P]>
    : Prisma.GetScalarType<T[P], AggregateOffer[P]>
}




export type OfferGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.OfferWhereInput
  orderBy?: Prisma.OfferOrderByWithAggregationInput | Prisma.OfferOrderByWithAggregationInput[]
  by: Prisma.OfferScalarFieldEnum[] | Prisma.OfferScalarFieldEnum
  having?: Prisma.OfferScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: OfferCountAggregateInputType | true
  _avg?: OfferAvgAggregateInputType
  _sum?: OfferSumAggregateInputType
  _min?: OfferMinAggregateInputType
  _max?: OfferMaxAggregateInputType
}

export type OfferGroupByOutputType = {
  id: string
  rideId: string
  riderId: string
  amount: number
  accepted: boolean
  createdAt: Date
  updatedAt: Date
  _count: OfferCountAggregateOutputType | null
  _avg: OfferAvgAggregateOutputType | null
  _sum: OfferSumAggregateOutputType | null
  _min: OfferMinAggregateOutputType | null
  _max: OfferMaxAggregateOutputType | null
}

type GetOfferGroupByPayload<T extends OfferGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<OfferGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof OfferGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], OfferGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], OfferGroupByOutputType[P]>
      }
    >
  >



export type OfferWhereInput = {
  AND?: Prisma.OfferWhereInput | Prisma.OfferWhereInput[]
  OR?: Prisma.OfferWhereInput[]
  NOT?: Prisma.OfferWhereInput | Prisma.OfferWhereInput[]
  id?: Prisma.StringFilter<"Offer"> | string
  rideId?: Prisma.StringFilter<"Offer"> | string
  riderId?: Prisma.StringFilter<"Offer"> | string
  amount?: Prisma.FloatFilter<"Offer"> | number
  accepted?: Prisma.BoolFilter<"Offer"> | boolean
  createdAt?: Prisma.DateTimeFilter<"Offer"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Offer"> | Date | string
  ride?: Prisma.XOR<Prisma.RideScalarRelationFilter, Prisma.RideWhereInput>
  rider?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type OfferOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  rideId?: Prisma.SortOrder
  riderId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  accepted?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  ride?: Prisma.RideOrderByWithRelationInput
  rider?: Prisma.UserOrderByWithRelationInput
}

export type OfferWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.OfferWhereInput | Prisma.OfferWhereInput[]
  OR?: Prisma.OfferWhereInput[]
  NOT?: Prisma.OfferWhereInput | Prisma.OfferWhereInput[]
  rideId?: Prisma.StringFilter<"Offer"> | string
  riderId?: Prisma.StringFilter<"Offer"> | string
  amount?: Prisma.FloatFilter<"Offer"> | number
  accepted?: Prisma.BoolFilter<"Offer"> | boolean
  createdAt?: Prisma.DateTimeFilter<"Offer"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Offer"> | Date | string
  ride?: Prisma.XOR<Prisma.RideScalarRelationFilter, Prisma.RideWhereInput>
  rider?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id">

export type OfferOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  rideId?: Prisma.SortOrder
  riderId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  accepted?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.OfferCountOrderByAggregateInput
  _avg?: Prisma.OfferAvgOrderByAggregateInput
  _max?: Prisma.OfferMaxOrderByAggregateInput
  _min?: Prisma.OfferMinOrderByAggregateInput
  _sum?: Prisma.OfferSumOrderByAggregateInput
}

export type OfferScalarWhereWithAggregatesInput = {
  AND?: Prisma.OfferScalarWhereWithAggregatesInput | Prisma.OfferScalarWhereWithAggregatesInput[]
  OR?: Prisma.OfferScalarWhereWithAggregatesInput[]
  NOT?: Prisma.OfferScalarWhereWithAggregatesInput | Prisma.OfferScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Offer"> | string
  rideId?: Prisma.StringWithAggregatesFilter<"Offer"> | string
  riderId?: Prisma.StringWithAggregatesFilter<"Offer"> | string
  amount?: Prisma.FloatWithAggregatesFilter<"Offer"> | number
  accepted?: Prisma.BoolWithAggregatesFilter<"Offer"> | boolean
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Offer"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Offer"> | Date | string
}

export type OfferCreateInput = {
  id?: string
  amount: number
  accepted?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  ride: Prisma.RideCreateNestedOneWithoutOffersInput
  rider: Prisma.UserCreateNestedOneWithoutOffersInput
}

export type OfferUncheckedCreateInput = {
  id?: string
  rideId: string
  riderId: string
  amount: number
  accepted?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type OfferUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  accepted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  ride?: Prisma.RideUpdateOneRequiredWithoutOffersNestedInput
  rider?: Prisma.UserUpdateOneRequiredWithoutOffersNestedInput
}

export type OfferUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  rideId?: Prisma.StringFieldUpdateOperationsInput | string
  riderId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  accepted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type OfferCreateManyInput = {
  id?: string
  rideId: string
  riderId: string
  amount: number
  accepted?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type OfferUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  accepted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type OfferUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  rideId?: Prisma.StringFieldUpdateOperationsInput | string
  riderId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  accepted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type OfferListRelationFilter = {
  every?: Prisma.OfferWhereInput
  some?: Prisma.OfferWhereInput
  none?: Prisma.OfferWhereInput
}

export type OfferOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type OfferCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  rideId?: Prisma.SortOrder
  riderId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  accepted?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type OfferAvgOrderByAggregateInput = {
  amount?: Prisma.SortOrder
}

export type OfferMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  rideId?: Prisma.SortOrder
  riderId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  accepted?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type OfferMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  rideId?: Prisma.SortOrder
  riderId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  accepted?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type OfferSumOrderByAggregateInput = {
  amount?: Prisma.SortOrder
}

export type OfferCreateNestedManyWithoutRiderInput = {
  create?: Prisma.XOR<Prisma.OfferCreateWithoutRiderInput, Prisma.OfferUncheckedCreateWithoutRiderInput> | Prisma.OfferCreateWithoutRiderInput[] | Prisma.OfferUncheckedCreateWithoutRiderInput[]
  connectOrCreate?: Prisma.OfferCreateOrConnectWithoutRiderInput | Prisma.OfferCreateOrConnectWithoutRiderInput[]
  createMany?: Prisma.OfferCreateManyRiderInputEnvelope
  connect?: Prisma.OfferWhereUniqueInput | Prisma.OfferWhereUniqueInput[]
}

export type OfferUncheckedCreateNestedManyWithoutRiderInput = {
  create?: Prisma.XOR<Prisma.OfferCreateWithoutRiderInput, Prisma.OfferUncheckedCreateWithoutRiderInput> | Prisma.OfferCreateWithoutRiderInput[] | Prisma.OfferUncheckedCreateWithoutRiderInput[]
  connectOrCreate?: Prisma.OfferCreateOrConnectWithoutRiderInput | Prisma.OfferCreateOrConnectWithoutRiderInput[]
  createMany?: Prisma.OfferCreateManyRiderInputEnvelope
  connect?: Prisma.OfferWhereUniqueInput | Prisma.OfferWhereUniqueInput[]
}

export type OfferUpdateManyWithoutRiderNestedInput = {
  create?: Prisma.XOR<Prisma.OfferCreateWithoutRiderInput, Prisma.OfferUncheckedCreateWithoutRiderInput> | Prisma.OfferCreateWithoutRiderInput[] | Prisma.OfferUncheckedCreateWithoutRiderInput[]
  connectOrCreate?: Prisma.OfferCreateOrConnectWithoutRiderInput | Prisma.OfferCreateOrConnectWithoutRiderInput[]
  upsert?: Prisma.OfferUpsertWithWhereUniqueWithoutRiderInput | Prisma.OfferUpsertWithWhereUniqueWithoutRiderInput[]
  createMany?: Prisma.OfferCreateManyRiderInputEnvelope
  set?: Prisma.OfferWhereUniqueInput | Prisma.OfferWhereUniqueInput[]
  disconnect?: Prisma.OfferWhereUniqueInput | Prisma.OfferWhereUniqueInput[]
  delete?: Prisma.OfferWhereUniqueInput | Prisma.OfferWhereUniqueInput[]
  connect?: Prisma.OfferWhereUniqueInput | Prisma.OfferWhereUniqueInput[]
  update?: Prisma.OfferUpdateWithWhereUniqueWithoutRiderInput | Prisma.OfferUpdateWithWhereUniqueWithoutRiderInput[]
  updateMany?: Prisma.OfferUpdateManyWithWhereWithoutRiderInput | Prisma.OfferUpdateManyWithWhereWithoutRiderInput[]
  deleteMany?: Prisma.OfferScalarWhereInput | Prisma.OfferScalarWhereInput[]
}

export type OfferUncheckedUpdateManyWithoutRiderNestedInput = {
  create?: Prisma.XOR<Prisma.OfferCreateWithoutRiderInput, Prisma.OfferUncheckedCreateWithoutRiderInput> | Prisma.OfferCreateWithoutRiderInput[] | Prisma.OfferUncheckedCreateWithoutRiderInput[]
  connectOrCreate?: Prisma.OfferCreateOrConnectWithoutRiderInput | Prisma.OfferCreateOrConnectWithoutRiderInput[]
  upsert?: Prisma.OfferUpsertWithWhereUniqueWithoutRiderInput | Prisma.OfferUpsertWithWhereUniqueWithoutRiderInput[]
  createMany?: Prisma.OfferCreateManyRiderInputEnvelope
  set?: Prisma.OfferWhereUniqueInput | Prisma.OfferWhereUniqueInput[]
  disconnect?: Prisma.OfferWhereUniqueInput | Prisma.OfferWhereUniqueInput[]
  delete?: Prisma.OfferWhereUniqueInput | Prisma.OfferWhereUniqueInput[]
  connect?: Prisma.OfferWhereUniqueInput | Prisma.OfferWhereUniqueInput[]
  update?: Prisma.OfferUpdateWithWhereUniqueWithoutRiderInput | Prisma.OfferUpdateWithWhereUniqueWithoutRiderInput[]
  updateMany?: Prisma.OfferUpdateManyWithWhereWithoutRiderInput | Prisma.OfferUpdateManyWithWhereWithoutRiderInput[]
  deleteMany?: Prisma.OfferScalarWhereInput | Prisma.OfferScalarWhereInput[]
}

export type OfferCreateNestedManyWithoutRideInput = {
  create?: Prisma.XOR<Prisma.OfferCreateWithoutRideInput, Prisma.OfferUncheckedCreateWithoutRideInput> | Prisma.OfferCreateWithoutRideInput[] | Prisma.OfferUncheckedCreateWithoutRideInput[]
  connectOrCreate?: Prisma.OfferCreateOrConnectWithoutRideInput | Prisma.OfferCreateOrConnectWithoutRideInput[]
  createMany?: Prisma.OfferCreateManyRideInputEnvelope
  connect?: Prisma.OfferWhereUniqueInput | Prisma.OfferWhereUniqueInput[]
}

export type OfferUncheckedCreateNestedManyWithoutRideInput = {
  create?: Prisma.XOR<Prisma.OfferCreateWithoutRideInput, Prisma.OfferUncheckedCreateWithoutRideInput> | Prisma.OfferCreateWithoutRideInput[] | Prisma.OfferUncheckedCreateWithoutRideInput[]
  connectOrCreate?: Prisma.OfferCreateOrConnectWithoutRideInput | Prisma.OfferCreateOrConnectWithoutRideInput[]
  createMany?: Prisma.OfferCreateManyRideInputEnvelope
  connect?: Prisma.OfferWhereUniqueInput | Prisma.OfferWhereUniqueInput[]
}

export type OfferUpdateManyWithoutRideNestedInput = {
  create?: Prisma.XOR<Prisma.OfferCreateWithoutRideInput, Prisma.OfferUncheckedCreateWithoutRideInput> | Prisma.OfferCreateWithoutRideInput[] | Prisma.OfferUncheckedCreateWithoutRideInput[]
  connectOrCreate?: Prisma.OfferCreateOrConnectWithoutRideInput | Prisma.OfferCreateOrConnectWithoutRideInput[]
  upsert?: Prisma.OfferUpsertWithWhereUniqueWithoutRideInput | Prisma.OfferUpsertWithWhereUniqueWithoutRideInput[]
  createMany?: Prisma.OfferCreateManyRideInputEnvelope
  set?: Prisma.OfferWhereUniqueInput | Prisma.OfferWhereUniqueInput[]
  disconnect?: Prisma.OfferWhereUniqueInput | Prisma.OfferWhereUniqueInput[]
  delete?: Prisma.OfferWhereUniqueInput | Prisma.OfferWhereUniqueInput[]
  connect?: Prisma.OfferWhereUniqueInput | Prisma.OfferWhereUniqueInput[]
  update?: Prisma.OfferUpdateWithWhereUniqueWithoutRideInput | Prisma.OfferUpdateWithWhereUniqueWithoutRideInput[]
  updateMany?: Prisma.OfferUpdateManyWithWhereWithoutRideInput | Prisma.OfferUpdateManyWithWhereWithoutRideInput[]
  deleteMany?: Prisma.OfferScalarWhereInput | Prisma.OfferScalarWhereInput[]
}

export type OfferUncheckedUpdateManyWithoutRideNestedInput = {
  create?: Prisma.XOR<Prisma.OfferCreateWithoutRideInput, Prisma.OfferUncheckedCreateWithoutRideInput> | Prisma.OfferCreateWithoutRideInput[] | Prisma.OfferUncheckedCreateWithoutRideInput[]
  connectOrCreate?: Prisma.OfferCreateOrConnectWithoutRideInput | Prisma.OfferCreateOrConnectWithoutRideInput[]
  upsert?: Prisma.OfferUpsertWithWhereUniqueWithoutRideInput | Prisma.OfferUpsertWithWhereUniqueWithoutRideInput[]
  createMany?: Prisma.OfferCreateManyRideInputEnvelope
  set?: Prisma.OfferWhereUniqueInput | Prisma.OfferWhereUniqueInput[]
  disconnect?: Prisma.OfferWhereUniqueInput | Prisma.OfferWhereUniqueInput[]
  delete?: Prisma.OfferWhereUniqueInput | Prisma.OfferWhereUniqueInput[]
  connect?: Prisma.OfferWhereUniqueInput | Prisma.OfferWhereUniqueInput[]
  update?: Prisma.OfferUpdateWithWhereUniqueWithoutRideInput | Prisma.OfferUpdateWithWhereUniqueWithoutRideInput[]
  updateMany?: Prisma.OfferUpdateManyWithWhereWithoutRideInput | Prisma.OfferUpdateManyWithWhereWithoutRideInput[]
  deleteMany?: Prisma.OfferScalarWhereInput | Prisma.OfferScalarWhereInput[]
}

export type OfferCreateWithoutRiderInput = {
  id?: string
  amount: number
  accepted?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  ride: Prisma.RideCreateNestedOneWithoutOffersInput
}

export type OfferUncheckedCreateWithoutRiderInput = {
  id?: string
  rideId: string
  amount: number
  accepted?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type OfferCreateOrConnectWithoutRiderInput = {
  where: Prisma.OfferWhereUniqueInput
  create: Prisma.XOR<Prisma.OfferCreateWithoutRiderInput, Prisma.OfferUncheckedCreateWithoutRiderInput>
}

export type OfferCreateManyRiderInputEnvelope = {
  data: Prisma.OfferCreateManyRiderInput | Prisma.OfferCreateManyRiderInput[]
  skipDuplicates?: boolean
}

export type OfferUpsertWithWhereUniqueWithoutRiderInput = {
  where: Prisma.OfferWhereUniqueInput
  update: Prisma.XOR<Prisma.OfferUpdateWithoutRiderInput, Prisma.OfferUncheckedUpdateWithoutRiderInput>
  create: Prisma.XOR<Prisma.OfferCreateWithoutRiderInput, Prisma.OfferUncheckedCreateWithoutRiderInput>
}

export type OfferUpdateWithWhereUniqueWithoutRiderInput = {
  where: Prisma.OfferWhereUniqueInput
  data: Prisma.XOR<Prisma.OfferUpdateWithoutRiderInput, Prisma.OfferUncheckedUpdateWithoutRiderInput>
}

export type OfferUpdateManyWithWhereWithoutRiderInput = {
  where: Prisma.OfferScalarWhereInput
  data: Prisma.XOR<Prisma.OfferUpdateManyMutationInput, Prisma.OfferUncheckedUpdateManyWithoutRiderInput>
}

export type OfferScalarWhereInput = {
  AND?: Prisma.OfferScalarWhereInput | Prisma.OfferScalarWhereInput[]
  OR?: Prisma.OfferScalarWhereInput[]
  NOT?: Prisma.OfferScalarWhereInput | Prisma.OfferScalarWhereInput[]
  id?: Prisma.StringFilter<"Offer"> | string
  rideId?: Prisma.StringFilter<"Offer"> | string
  riderId?: Prisma.StringFilter<"Offer"> | string
  amount?: Prisma.FloatFilter<"Offer"> | number
  accepted?: Prisma.BoolFilter<"Offer"> | boolean
  createdAt?: Prisma.DateTimeFilter<"Offer"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Offer"> | Date | string
}

export type OfferCreateWithoutRideInput = {
  id?: string
  amount: number
  accepted?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  rider: Prisma.UserCreateNestedOneWithoutOffersInput
}

export type OfferUncheckedCreateWithoutRideInput = {
  id?: string
  riderId: string
  amount: number
  accepted?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type OfferCreateOrConnectWithoutRideInput = {
  where: Prisma.OfferWhereUniqueInput
  create: Prisma.XOR<Prisma.OfferCreateWithoutRideInput, Prisma.OfferUncheckedCreateWithoutRideInput>
}

export type OfferCreateManyRideInputEnvelope = {
  data: Prisma.OfferCreateManyRideInput | Prisma.OfferCreateManyRideInput[]
  skipDuplicates?: boolean
}

export type OfferUpsertWithWhereUniqueWithoutRideInput = {
  where: Prisma.OfferWhereUniqueInput
  update: Prisma.XOR<Prisma.OfferUpdateWithoutRideInput, Prisma.OfferUncheckedUpdateWithoutRideInput>
  create: Prisma.XOR<Prisma.OfferCreateWithoutRideInput, Prisma.OfferUncheckedCreateWithoutRideInput>
}

export type OfferUpdateWithWhereUniqueWithoutRideInput = {
  where: Prisma.OfferWhereUniqueInput
  data: Prisma.XOR<Prisma.OfferUpdateWithoutRideInput, Prisma.OfferUncheckedUpdateWithoutRideInput>
}

export type OfferUpdateManyWithWhereWithoutRideInput = {
  where: Prisma.OfferScalarWhereInput
  data: Prisma.XOR<Prisma.OfferUpdateManyMutationInput, Prisma.OfferUncheckedUpdateManyWithoutRideInput>
}

export type OfferCreateManyRiderInput = {
  id?: string
  rideId: string
  amount: number
  accepted?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type OfferUpdateWithoutRiderInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  accepted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  ride?: Prisma.RideUpdateOneRequiredWithoutOffersNestedInput
}

export type OfferUncheckedUpdateWithoutRiderInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  rideId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  accepted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type OfferUncheckedUpdateManyWithoutRiderInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  rideId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  accepted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type OfferCreateManyRideInput = {
  id?: string
  riderId: string
  amount: number
  accepted?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type OfferUpdateWithoutRideInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  accepted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  rider?: Prisma.UserUpdateOneRequiredWithoutOffersNestedInput
}

export type OfferUncheckedUpdateWithoutRideInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  riderId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  accepted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type OfferUncheckedUpdateManyWithoutRideInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  riderId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  accepted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type OfferSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  rideId?: boolean
  riderId?: boolean
  amount?: boolean
  accepted?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  ride?: boolean | Prisma.RideDefaultArgs<ExtArgs>
  rider?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["offer"]>

export type OfferSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  rideId?: boolean
  riderId?: boolean
  amount?: boolean
  accepted?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  ride?: boolean | Prisma.RideDefaultArgs<ExtArgs>
  rider?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["offer"]>

export type OfferSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  rideId?: boolean
  riderId?: boolean
  amount?: boolean
  accepted?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  ride?: boolean | Prisma.RideDefaultArgs<ExtArgs>
  rider?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["offer"]>

export type OfferSelectScalar = {
  id?: boolean
  rideId?: boolean
  riderId?: boolean
  amount?: boolean
  accepted?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type OfferOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "rideId" | "riderId" | "amount" | "accepted" | "createdAt" | "updatedAt", ExtArgs["result"]["offer"]>
export type OfferInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  ride?: boolean | Prisma.RideDefaultArgs<ExtArgs>
  rider?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type OfferIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  ride?: boolean | Prisma.RideDefaultArgs<ExtArgs>
  rider?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type OfferIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  ride?: boolean | Prisma.RideDefaultArgs<ExtArgs>
  rider?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $OfferPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Offer"
  objects: {
    ride: Prisma.$RidePayload<ExtArgs>
    rider: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    rideId: string
    riderId: string
    amount: number
    accepted: boolean
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["offer"]>
  composites: {}
}

export type OfferGetPayload<S extends boolean | null | undefined | OfferDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$OfferPayload, S>

export type OfferCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<OfferFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: OfferCountAggregateInputType | true
  }

export interface OfferDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Offer'], meta: { name: 'Offer' } }
  /**
   * Find zero or one Offer that matches the filter.
   * @param {OfferFindUniqueArgs} args - Arguments to find a Offer
   * @example
   * // Get one Offer
   * const offer = await prisma.offer.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends OfferFindUniqueArgs>(args: Prisma.SelectSubset<T, OfferFindUniqueArgs<ExtArgs>>): Prisma.Prisma__OfferClient<runtime.Types.Result.GetResult<Prisma.$OfferPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Offer that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {OfferFindUniqueOrThrowArgs} args - Arguments to find a Offer
   * @example
   * // Get one Offer
   * const offer = await prisma.offer.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends OfferFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, OfferFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__OfferClient<runtime.Types.Result.GetResult<Prisma.$OfferPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Offer that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OfferFindFirstArgs} args - Arguments to find a Offer
   * @example
   * // Get one Offer
   * const offer = await prisma.offer.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends OfferFindFirstArgs>(args?: Prisma.SelectSubset<T, OfferFindFirstArgs<ExtArgs>>): Prisma.Prisma__OfferClient<runtime.Types.Result.GetResult<Prisma.$OfferPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Offer that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OfferFindFirstOrThrowArgs} args - Arguments to find a Offer
   * @example
   * // Get one Offer
   * const offer = await prisma.offer.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends OfferFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, OfferFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__OfferClient<runtime.Types.Result.GetResult<Prisma.$OfferPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Offers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OfferFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Offers
   * const offers = await prisma.offer.findMany()
   * 
   * // Get first 10 Offers
   * const offers = await prisma.offer.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const offerWithIdOnly = await prisma.offer.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends OfferFindManyArgs>(args?: Prisma.SelectSubset<T, OfferFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OfferPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Offer.
   * @param {OfferCreateArgs} args - Arguments to create a Offer.
   * @example
   * // Create one Offer
   * const Offer = await prisma.offer.create({
   *   data: {
   *     // ... data to create a Offer
   *   }
   * })
   * 
   */
  create<T extends OfferCreateArgs>(args: Prisma.SelectSubset<T, OfferCreateArgs<ExtArgs>>): Prisma.Prisma__OfferClient<runtime.Types.Result.GetResult<Prisma.$OfferPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Offers.
   * @param {OfferCreateManyArgs} args - Arguments to create many Offers.
   * @example
   * // Create many Offers
   * const offer = await prisma.offer.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends OfferCreateManyArgs>(args?: Prisma.SelectSubset<T, OfferCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Offers and returns the data saved in the database.
   * @param {OfferCreateManyAndReturnArgs} args - Arguments to create many Offers.
   * @example
   * // Create many Offers
   * const offer = await prisma.offer.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Offers and only return the `id`
   * const offerWithIdOnly = await prisma.offer.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends OfferCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, OfferCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OfferPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Offer.
   * @param {OfferDeleteArgs} args - Arguments to delete one Offer.
   * @example
   * // Delete one Offer
   * const Offer = await prisma.offer.delete({
   *   where: {
   *     // ... filter to delete one Offer
   *   }
   * })
   * 
   */
  delete<T extends OfferDeleteArgs>(args: Prisma.SelectSubset<T, OfferDeleteArgs<ExtArgs>>): Prisma.Prisma__OfferClient<runtime.Types.Result.GetResult<Prisma.$OfferPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Offer.
   * @param {OfferUpdateArgs} args - Arguments to update one Offer.
   * @example
   * // Update one Offer
   * const offer = await prisma.offer.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends OfferUpdateArgs>(args: Prisma.SelectSubset<T, OfferUpdateArgs<ExtArgs>>): Prisma.Prisma__OfferClient<runtime.Types.Result.GetResult<Prisma.$OfferPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Offers.
   * @param {OfferDeleteManyArgs} args - Arguments to filter Offers to delete.
   * @example
   * // Delete a few Offers
   * const { count } = await prisma.offer.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends OfferDeleteManyArgs>(args?: Prisma.SelectSubset<T, OfferDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Offers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OfferUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Offers
   * const offer = await prisma.offer.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends OfferUpdateManyArgs>(args: Prisma.SelectSubset<T, OfferUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Offers and returns the data updated in the database.
   * @param {OfferUpdateManyAndReturnArgs} args - Arguments to update many Offers.
   * @example
   * // Update many Offers
   * const offer = await prisma.offer.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Offers and only return the `id`
   * const offerWithIdOnly = await prisma.offer.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends OfferUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, OfferUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OfferPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Offer.
   * @param {OfferUpsertArgs} args - Arguments to update or create a Offer.
   * @example
   * // Update or create a Offer
   * const offer = await prisma.offer.upsert({
   *   create: {
   *     // ... data to create a Offer
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Offer we want to update
   *   }
   * })
   */
  upsert<T extends OfferUpsertArgs>(args: Prisma.SelectSubset<T, OfferUpsertArgs<ExtArgs>>): Prisma.Prisma__OfferClient<runtime.Types.Result.GetResult<Prisma.$OfferPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Offers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OfferCountArgs} args - Arguments to filter Offers to count.
   * @example
   * // Count the number of Offers
   * const count = await prisma.offer.count({
   *   where: {
   *     // ... the filter for the Offers we want to count
   *   }
   * })
  **/
  count<T extends OfferCountArgs>(
    args?: Prisma.Subset<T, OfferCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], OfferCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Offer.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OfferAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends OfferAggregateArgs>(args: Prisma.Subset<T, OfferAggregateArgs>): Prisma.PrismaPromise<GetOfferAggregateType<T>>

  /**
   * Group by Offer.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OfferGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends OfferGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: OfferGroupByArgs['orderBy'] }
      : { orderBy?: OfferGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, OfferGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOfferGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Offer model
 */
readonly fields: OfferFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Offer.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__OfferClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  ride<T extends Prisma.RideDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.RideDefaultArgs<ExtArgs>>): Prisma.Prisma__RideClient<runtime.Types.Result.GetResult<Prisma.$RidePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  rider<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Offer model
 */
export interface OfferFieldRefs {
  readonly id: Prisma.FieldRef<"Offer", 'String'>
  readonly rideId: Prisma.FieldRef<"Offer", 'String'>
  readonly riderId: Prisma.FieldRef<"Offer", 'String'>
  readonly amount: Prisma.FieldRef<"Offer", 'Float'>
  readonly accepted: Prisma.FieldRef<"Offer", 'Boolean'>
  readonly createdAt: Prisma.FieldRef<"Offer", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Offer", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Offer findUnique
 */
export type OfferFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Offer
   */
  select?: Prisma.OfferSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Offer
   */
  omit?: Prisma.OfferOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OfferInclude<ExtArgs> | null
  /**
   * Filter, which Offer to fetch.
   */
  where: Prisma.OfferWhereUniqueInput
}

/**
 * Offer findUniqueOrThrow
 */
export type OfferFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Offer
   */
  select?: Prisma.OfferSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Offer
   */
  omit?: Prisma.OfferOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OfferInclude<ExtArgs> | null
  /**
   * Filter, which Offer to fetch.
   */
  where: Prisma.OfferWhereUniqueInput
}

/**
 * Offer findFirst
 */
export type OfferFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Offer
   */
  select?: Prisma.OfferSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Offer
   */
  omit?: Prisma.OfferOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OfferInclude<ExtArgs> | null
  /**
   * Filter, which Offer to fetch.
   */
  where?: Prisma.OfferWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Offers to fetch.
   */
  orderBy?: Prisma.OfferOrderByWithRelationInput | Prisma.OfferOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Offers.
   */
  cursor?: Prisma.OfferWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Offers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Offers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Offers.
   */
  distinct?: Prisma.OfferScalarFieldEnum | Prisma.OfferScalarFieldEnum[]
}

/**
 * Offer findFirstOrThrow
 */
export type OfferFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Offer
   */
  select?: Prisma.OfferSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Offer
   */
  omit?: Prisma.OfferOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OfferInclude<ExtArgs> | null
  /**
   * Filter, which Offer to fetch.
   */
  where?: Prisma.OfferWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Offers to fetch.
   */
  orderBy?: Prisma.OfferOrderByWithRelationInput | Prisma.OfferOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Offers.
   */
  cursor?: Prisma.OfferWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Offers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Offers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Offers.
   */
  distinct?: Prisma.OfferScalarFieldEnum | Prisma.OfferScalarFieldEnum[]
}

/**
 * Offer findMany
 */
export type OfferFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Offer
   */
  select?: Prisma.OfferSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Offer
   */
  omit?: Prisma.OfferOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OfferInclude<ExtArgs> | null
  /**
   * Filter, which Offers to fetch.
   */
  where?: Prisma.OfferWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Offers to fetch.
   */
  orderBy?: Prisma.OfferOrderByWithRelationInput | Prisma.OfferOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Offers.
   */
  cursor?: Prisma.OfferWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Offers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Offers.
   */
  skip?: number
  distinct?: Prisma.OfferScalarFieldEnum | Prisma.OfferScalarFieldEnum[]
}

/**
 * Offer create
 */
export type OfferCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Offer
   */
  select?: Prisma.OfferSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Offer
   */
  omit?: Prisma.OfferOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OfferInclude<ExtArgs> | null
  /**
   * The data needed to create a Offer.
   */
  data: Prisma.XOR<Prisma.OfferCreateInput, Prisma.OfferUncheckedCreateInput>
}

/**
 * Offer createMany
 */
export type OfferCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Offers.
   */
  data: Prisma.OfferCreateManyInput | Prisma.OfferCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Offer createManyAndReturn
 */
export type OfferCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Offer
   */
  select?: Prisma.OfferSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Offer
   */
  omit?: Prisma.OfferOmit<ExtArgs> | null
  /**
   * The data used to create many Offers.
   */
  data: Prisma.OfferCreateManyInput | Prisma.OfferCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OfferIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Offer update
 */
export type OfferUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Offer
   */
  select?: Prisma.OfferSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Offer
   */
  omit?: Prisma.OfferOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OfferInclude<ExtArgs> | null
  /**
   * The data needed to update a Offer.
   */
  data: Prisma.XOR<Prisma.OfferUpdateInput, Prisma.OfferUncheckedUpdateInput>
  /**
   * Choose, which Offer to update.
   */
  where: Prisma.OfferWhereUniqueInput
}

/**
 * Offer updateMany
 */
export type OfferUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Offers.
   */
  data: Prisma.XOR<Prisma.OfferUpdateManyMutationInput, Prisma.OfferUncheckedUpdateManyInput>
  /**
   * Filter which Offers to update
   */
  where?: Prisma.OfferWhereInput
  /**
   * Limit how many Offers to update.
   */
  limit?: number
}

/**
 * Offer updateManyAndReturn
 */
export type OfferUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Offer
   */
  select?: Prisma.OfferSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Offer
   */
  omit?: Prisma.OfferOmit<ExtArgs> | null
  /**
   * The data used to update Offers.
   */
  data: Prisma.XOR<Prisma.OfferUpdateManyMutationInput, Prisma.OfferUncheckedUpdateManyInput>
  /**
   * Filter which Offers to update
   */
  where?: Prisma.OfferWhereInput
  /**
   * Limit how many Offers to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OfferIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Offer upsert
 */
export type OfferUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Offer
   */
  select?: Prisma.OfferSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Offer
   */
  omit?: Prisma.OfferOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OfferInclude<ExtArgs> | null
  /**
   * The filter to search for the Offer to update in case it exists.
   */
  where: Prisma.OfferWhereUniqueInput
  /**
   * In case the Offer found by the `where` argument doesn't exist, create a new Offer with this data.
   */
  create: Prisma.XOR<Prisma.OfferCreateInput, Prisma.OfferUncheckedCreateInput>
  /**
   * In case the Offer was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.OfferUpdateInput, Prisma.OfferUncheckedUpdateInput>
}

/**
 * Offer delete
 */
export type OfferDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Offer
   */
  select?: Prisma.OfferSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Offer
   */
  omit?: Prisma.OfferOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OfferInclude<ExtArgs> | null
  /**
   * Filter which Offer to delete.
   */
  where: Prisma.OfferWhereUniqueInput
}

/**
 * Offer deleteMany
 */
export type OfferDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Offers to delete
   */
  where?: Prisma.OfferWhereInput
  /**
   * Limit how many Offers to delete.
   */
  limit?: number
}

/**
 * Offer without action
 */
export type OfferDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Offer
   */
  select?: Prisma.OfferSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Offer
   */
  omit?: Prisma.OfferOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OfferInclude<ExtArgs> | null
}

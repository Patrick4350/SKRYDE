
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `RideRequest` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model RideRequest
 * 
 */
export type RideRequestModel = runtime.Types.Result.DefaultSelection<Prisma.$RideRequestPayload>

export type AggregateRideRequest = {
  _count: RideRequestCountAggregateOutputType | null
  _avg: RideRequestAvgAggregateOutputType | null
  _sum: RideRequestSumAggregateOutputType | null
  _min: RideRequestMinAggregateOutputType | null
  _max: RideRequestMaxAggregateOutputType | null
}

export type RideRequestAvgAggregateOutputType = {
  maxFare: number | null
  passengers: number | null
  originLatitude: number | null
  originLongitude: number | null
  destLatitude: number | null
  destLongitude: number | null
}

export type RideRequestSumAggregateOutputType = {
  maxFare: number | null
  passengers: number | null
  originLatitude: number | null
  originLongitude: number | null
  destLatitude: number | null
  destLongitude: number | null
}

export type RideRequestMinAggregateOutputType = {
  id: string | null
  riderId: string | null
  rideId: string | null
  maxFare: number | null
  status: $Enums.RequestStatus | null
  createdAt: Date | null
  updatedAt: Date | null
  origin: string | null
  destination: string | null
  departureTime: Date | null
  passengers: number | null
  message: string | null
  originLatitude: number | null
  originLongitude: number | null
  destLatitude: number | null
  destLongitude: number | null
}

export type RideRequestMaxAggregateOutputType = {
  id: string | null
  riderId: string | null
  rideId: string | null
  maxFare: number | null
  status: $Enums.RequestStatus | null
  createdAt: Date | null
  updatedAt: Date | null
  origin: string | null
  destination: string | null
  departureTime: Date | null
  passengers: number | null
  message: string | null
  originLatitude: number | null
  originLongitude: number | null
  destLatitude: number | null
  destLongitude: number | null
}

export type RideRequestCountAggregateOutputType = {
  id: number
  riderId: number
  rideId: number
  maxFare: number
  status: number
  createdAt: number
  updatedAt: number
  origin: number
  destination: number
  departureTime: number
  passengers: number
  message: number
  originLatitude: number
  originLongitude: number
  destLatitude: number
  destLongitude: number
  _all: number
}


export type RideRequestAvgAggregateInputType = {
  maxFare?: true
  passengers?: true
  originLatitude?: true
  originLongitude?: true
  destLatitude?: true
  destLongitude?: true
}

export type RideRequestSumAggregateInputType = {
  maxFare?: true
  passengers?: true
  originLatitude?: true
  originLongitude?: true
  destLatitude?: true
  destLongitude?: true
}

export type RideRequestMinAggregateInputType = {
  id?: true
  riderId?: true
  rideId?: true
  maxFare?: true
  status?: true
  createdAt?: true
  updatedAt?: true
  origin?: true
  destination?: true
  departureTime?: true
  passengers?: true
  message?: true
  originLatitude?: true
  originLongitude?: true
  destLatitude?: true
  destLongitude?: true
}

export type RideRequestMaxAggregateInputType = {
  id?: true
  riderId?: true
  rideId?: true
  maxFare?: true
  status?: true
  createdAt?: true
  updatedAt?: true
  origin?: true
  destination?: true
  departureTime?: true
  passengers?: true
  message?: true
  originLatitude?: true
  originLongitude?: true
  destLatitude?: true
  destLongitude?: true
}

export type RideRequestCountAggregateInputType = {
  id?: true
  riderId?: true
  rideId?: true
  maxFare?: true
  status?: true
  createdAt?: true
  updatedAt?: true
  origin?: true
  destination?: true
  departureTime?: true
  passengers?: true
  message?: true
  originLatitude?: true
  originLongitude?: true
  destLatitude?: true
  destLongitude?: true
  _all?: true
}

export type RideRequestAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which RideRequest to aggregate.
   */
  where?: Prisma.RideRequestWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of RideRequests to fetch.
   */
  orderBy?: Prisma.RideRequestOrderByWithRelationInput | Prisma.RideRequestOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.RideRequestWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` RideRequests from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` RideRequests.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned RideRequests
  **/
  _count?: true | RideRequestCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: RideRequestAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: RideRequestSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: RideRequestMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: RideRequestMaxAggregateInputType
}

export type GetRideRequestAggregateType<T extends RideRequestAggregateArgs> = {
      [P in keyof T & keyof AggregateRideRequest]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateRideRequest[P]>
    : Prisma.GetScalarType<T[P], AggregateRideRequest[P]>
}




export type RideRequestGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.RideRequestWhereInput
  orderBy?: Prisma.RideRequestOrderByWithAggregationInput | Prisma.RideRequestOrderByWithAggregationInput[]
  by: Prisma.RideRequestScalarFieldEnum[] | Prisma.RideRequestScalarFieldEnum
  having?: Prisma.RideRequestScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: RideRequestCountAggregateInputType | true
  _avg?: RideRequestAvgAggregateInputType
  _sum?: RideRequestSumAggregateInputType
  _min?: RideRequestMinAggregateInputType
  _max?: RideRequestMaxAggregateInputType
}

export type RideRequestGroupByOutputType = {
  id: string
  riderId: string
  rideId: string | null
  maxFare: number
  status: $Enums.RequestStatus
  createdAt: Date
  updatedAt: Date
  origin: string | null
  destination: string | null
  departureTime: Date | null
  passengers: number | null
  message: string | null
  originLatitude: number | null
  originLongitude: number | null
  destLatitude: number | null
  destLongitude: number | null
  _count: RideRequestCountAggregateOutputType | null
  _avg: RideRequestAvgAggregateOutputType | null
  _sum: RideRequestSumAggregateOutputType | null
  _min: RideRequestMinAggregateOutputType | null
  _max: RideRequestMaxAggregateOutputType | null
}

type GetRideRequestGroupByPayload<T extends RideRequestGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<RideRequestGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof RideRequestGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], RideRequestGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], RideRequestGroupByOutputType[P]>
      }
    >
  >



export type RideRequestWhereInput = {
  AND?: Prisma.RideRequestWhereInput | Prisma.RideRequestWhereInput[]
  OR?: Prisma.RideRequestWhereInput[]
  NOT?: Prisma.RideRequestWhereInput | Prisma.RideRequestWhereInput[]
  id?: Prisma.StringFilter<"RideRequest"> | string
  riderId?: Prisma.StringFilter<"RideRequest"> | string
  rideId?: Prisma.StringNullableFilter<"RideRequest"> | string | null
  maxFare?: Prisma.FloatFilter<"RideRequest"> | number
  status?: Prisma.EnumRequestStatusFilter<"RideRequest"> | $Enums.RequestStatus
  createdAt?: Prisma.DateTimeFilter<"RideRequest"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"RideRequest"> | Date | string
  origin?: Prisma.StringNullableFilter<"RideRequest"> | string | null
  destination?: Prisma.StringNullableFilter<"RideRequest"> | string | null
  departureTime?: Prisma.DateTimeNullableFilter<"RideRequest"> | Date | string | null
  passengers?: Prisma.IntNullableFilter<"RideRequest"> | number | null
  message?: Prisma.StringNullableFilter<"RideRequest"> | string | null
  originLatitude?: Prisma.FloatNullableFilter<"RideRequest"> | number | null
  originLongitude?: Prisma.FloatNullableFilter<"RideRequest"> | number | null
  destLatitude?: Prisma.FloatNullableFilter<"RideRequest"> | number | null
  destLongitude?: Prisma.FloatNullableFilter<"RideRequest"> | number | null
  rider?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  ride?: Prisma.XOR<Prisma.RideNullableScalarRelationFilter, Prisma.RideWhereInput> | null
}

export type RideRequestOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  riderId?: Prisma.SortOrder
  rideId?: Prisma.SortOrderInput | Prisma.SortOrder
  maxFare?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  origin?: Prisma.SortOrderInput | Prisma.SortOrder
  destination?: Prisma.SortOrderInput | Prisma.SortOrder
  departureTime?: Prisma.SortOrderInput | Prisma.SortOrder
  passengers?: Prisma.SortOrderInput | Prisma.SortOrder
  message?: Prisma.SortOrderInput | Prisma.SortOrder
  originLatitude?: Prisma.SortOrderInput | Prisma.SortOrder
  originLongitude?: Prisma.SortOrderInput | Prisma.SortOrder
  destLatitude?: Prisma.SortOrderInput | Prisma.SortOrder
  destLongitude?: Prisma.SortOrderInput | Prisma.SortOrder
  rider?: Prisma.UserOrderByWithRelationInput
  ride?: Prisma.RideOrderByWithRelationInput
}

export type RideRequestWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.RideRequestWhereInput | Prisma.RideRequestWhereInput[]
  OR?: Prisma.RideRequestWhereInput[]
  NOT?: Prisma.RideRequestWhereInput | Prisma.RideRequestWhereInput[]
  riderId?: Prisma.StringFilter<"RideRequest"> | string
  rideId?: Prisma.StringNullableFilter<"RideRequest"> | string | null
  maxFare?: Prisma.FloatFilter<"RideRequest"> | number
  status?: Prisma.EnumRequestStatusFilter<"RideRequest"> | $Enums.RequestStatus
  createdAt?: Prisma.DateTimeFilter<"RideRequest"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"RideRequest"> | Date | string
  origin?: Prisma.StringNullableFilter<"RideRequest"> | string | null
  destination?: Prisma.StringNullableFilter<"RideRequest"> | string | null
  departureTime?: Prisma.DateTimeNullableFilter<"RideRequest"> | Date | string | null
  passengers?: Prisma.IntNullableFilter<"RideRequest"> | number | null
  message?: Prisma.StringNullableFilter<"RideRequest"> | string | null
  originLatitude?: Prisma.FloatNullableFilter<"RideRequest"> | number | null
  originLongitude?: Prisma.FloatNullableFilter<"RideRequest"> | number | null
  destLatitude?: Prisma.FloatNullableFilter<"RideRequest"> | number | null
  destLongitude?: Prisma.FloatNullableFilter<"RideRequest"> | number | null
  rider?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  ride?: Prisma.XOR<Prisma.RideNullableScalarRelationFilter, Prisma.RideWhereInput> | null
}, "id">

export type RideRequestOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  riderId?: Prisma.SortOrder
  rideId?: Prisma.SortOrderInput | Prisma.SortOrder
  maxFare?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  origin?: Prisma.SortOrderInput | Prisma.SortOrder
  destination?: Prisma.SortOrderInput | Prisma.SortOrder
  departureTime?: Prisma.SortOrderInput | Prisma.SortOrder
  passengers?: Prisma.SortOrderInput | Prisma.SortOrder
  message?: Prisma.SortOrderInput | Prisma.SortOrder
  originLatitude?: Prisma.SortOrderInput | Prisma.SortOrder
  originLongitude?: Prisma.SortOrderInput | Prisma.SortOrder
  destLatitude?: Prisma.SortOrderInput | Prisma.SortOrder
  destLongitude?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.RideRequestCountOrderByAggregateInput
  _avg?: Prisma.RideRequestAvgOrderByAggregateInput
  _max?: Prisma.RideRequestMaxOrderByAggregateInput
  _min?: Prisma.RideRequestMinOrderByAggregateInput
  _sum?: Prisma.RideRequestSumOrderByAggregateInput
}

export type RideRequestScalarWhereWithAggregatesInput = {
  AND?: Prisma.RideRequestScalarWhereWithAggregatesInput | Prisma.RideRequestScalarWhereWithAggregatesInput[]
  OR?: Prisma.RideRequestScalarWhereWithAggregatesInput[]
  NOT?: Prisma.RideRequestScalarWhereWithAggregatesInput | Prisma.RideRequestScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"RideRequest"> | string
  riderId?: Prisma.StringWithAggregatesFilter<"RideRequest"> | string
  rideId?: Prisma.StringNullableWithAggregatesFilter<"RideRequest"> | string | null
  maxFare?: Prisma.FloatWithAggregatesFilter<"RideRequest"> | number
  status?: Prisma.EnumRequestStatusWithAggregatesFilter<"RideRequest"> | $Enums.RequestStatus
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"RideRequest"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"RideRequest"> | Date | string
  origin?: Prisma.StringNullableWithAggregatesFilter<"RideRequest"> | string | null
  destination?: Prisma.StringNullableWithAggregatesFilter<"RideRequest"> | string | null
  departureTime?: Prisma.DateTimeNullableWithAggregatesFilter<"RideRequest"> | Date | string | null
  passengers?: Prisma.IntNullableWithAggregatesFilter<"RideRequest"> | number | null
  message?: Prisma.StringNullableWithAggregatesFilter<"RideRequest"> | string | null
  originLatitude?: Prisma.FloatNullableWithAggregatesFilter<"RideRequest"> | number | null
  originLongitude?: Prisma.FloatNullableWithAggregatesFilter<"RideRequest"> | number | null
  destLatitude?: Prisma.FloatNullableWithAggregatesFilter<"RideRequest"> | number | null
  destLongitude?: Prisma.FloatNullableWithAggregatesFilter<"RideRequest"> | number | null
}

export type RideRequestCreateInput = {
  id?: string
  maxFare: number
  status?: $Enums.RequestStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  origin?: string | null
  destination?: string | null
  departureTime?: Date | string | null
  passengers?: number | null
  message?: string | null
  originLatitude?: number | null
  originLongitude?: number | null
  destLatitude?: number | null
  destLongitude?: number | null
  rider: Prisma.UserCreateNestedOneWithoutRidesAsRiderInput
  ride?: Prisma.RideCreateNestedOneWithoutRequestsInput
}

export type RideRequestUncheckedCreateInput = {
  id?: string
  riderId: string
  rideId?: string | null
  maxFare: number
  status?: $Enums.RequestStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  origin?: string | null
  destination?: string | null
  departureTime?: Date | string | null
  passengers?: number | null
  message?: string | null
  originLatitude?: number | null
  originLongitude?: number | null
  destLatitude?: number | null
  destLongitude?: number | null
}

export type RideRequestUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  maxFare?: Prisma.FloatFieldUpdateOperationsInput | number
  status?: Prisma.EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  origin?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  destination?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  departureTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  passengers?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  message?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  originLatitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  originLongitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  destLatitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  destLongitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  rider?: Prisma.UserUpdateOneRequiredWithoutRidesAsRiderNestedInput
  ride?: Prisma.RideUpdateOneWithoutRequestsNestedInput
}

export type RideRequestUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  riderId?: Prisma.StringFieldUpdateOperationsInput | string
  rideId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  maxFare?: Prisma.FloatFieldUpdateOperationsInput | number
  status?: Prisma.EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  origin?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  destination?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  departureTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  passengers?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  message?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  originLatitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  originLongitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  destLatitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  destLongitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
}

export type RideRequestCreateManyInput = {
  id?: string
  riderId: string
  rideId?: string | null
  maxFare: number
  status?: $Enums.RequestStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  origin?: string | null
  destination?: string | null
  departureTime?: Date | string | null
  passengers?: number | null
  message?: string | null
  originLatitude?: number | null
  originLongitude?: number | null
  destLatitude?: number | null
  destLongitude?: number | null
}

export type RideRequestUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  maxFare?: Prisma.FloatFieldUpdateOperationsInput | number
  status?: Prisma.EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  origin?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  destination?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  departureTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  passengers?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  message?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  originLatitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  originLongitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  destLatitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  destLongitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
}

export type RideRequestUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  riderId?: Prisma.StringFieldUpdateOperationsInput | string
  rideId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  maxFare?: Prisma.FloatFieldUpdateOperationsInput | number
  status?: Prisma.EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  origin?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  destination?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  departureTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  passengers?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  message?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  originLatitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  originLongitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  destLatitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  destLongitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
}

export type RideRequestListRelationFilter = {
  every?: Prisma.RideRequestWhereInput
  some?: Prisma.RideRequestWhereInput
  none?: Prisma.RideRequestWhereInput
}

export type RideRequestOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type RideRequestCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  riderId?: Prisma.SortOrder
  rideId?: Prisma.SortOrder
  maxFare?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  origin?: Prisma.SortOrder
  destination?: Prisma.SortOrder
  departureTime?: Prisma.SortOrder
  passengers?: Prisma.SortOrder
  message?: Prisma.SortOrder
  originLatitude?: Prisma.SortOrder
  originLongitude?: Prisma.SortOrder
  destLatitude?: Prisma.SortOrder
  destLongitude?: Prisma.SortOrder
}

export type RideRequestAvgOrderByAggregateInput = {
  maxFare?: Prisma.SortOrder
  passengers?: Prisma.SortOrder
  originLatitude?: Prisma.SortOrder
  originLongitude?: Prisma.SortOrder
  destLatitude?: Prisma.SortOrder
  destLongitude?: Prisma.SortOrder
}

export type RideRequestMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  riderId?: Prisma.SortOrder
  rideId?: Prisma.SortOrder
  maxFare?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  origin?: Prisma.SortOrder
  destination?: Prisma.SortOrder
  departureTime?: Prisma.SortOrder
  passengers?: Prisma.SortOrder
  message?: Prisma.SortOrder
  originLatitude?: Prisma.SortOrder
  originLongitude?: Prisma.SortOrder
  destLatitude?: Prisma.SortOrder
  destLongitude?: Prisma.SortOrder
}

export type RideRequestMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  riderId?: Prisma.SortOrder
  rideId?: Prisma.SortOrder
  maxFare?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  origin?: Prisma.SortOrder
  destination?: Prisma.SortOrder
  departureTime?: Prisma.SortOrder
  passengers?: Prisma.SortOrder
  message?: Prisma.SortOrder
  originLatitude?: Prisma.SortOrder
  originLongitude?: Prisma.SortOrder
  destLatitude?: Prisma.SortOrder
  destLongitude?: Prisma.SortOrder
}

export type RideRequestSumOrderByAggregateInput = {
  maxFare?: Prisma.SortOrder
  passengers?: Prisma.SortOrder
  originLatitude?: Prisma.SortOrder
  originLongitude?: Prisma.SortOrder
  destLatitude?: Prisma.SortOrder
  destLongitude?: Prisma.SortOrder
}

export type RideRequestCreateNestedManyWithoutRiderInput = {
  create?: Prisma.XOR<Prisma.RideRequestCreateWithoutRiderInput, Prisma.RideRequestUncheckedCreateWithoutRiderInput> | Prisma.RideRequestCreateWithoutRiderInput[] | Prisma.RideRequestUncheckedCreateWithoutRiderInput[]
  connectOrCreate?: Prisma.RideRequestCreateOrConnectWithoutRiderInput | Prisma.RideRequestCreateOrConnectWithoutRiderInput[]
  createMany?: Prisma.RideRequestCreateManyRiderInputEnvelope
  connect?: Prisma.RideRequestWhereUniqueInput | Prisma.RideRequestWhereUniqueInput[]
}

export type RideRequestUncheckedCreateNestedManyWithoutRiderInput = {
  create?: Prisma.XOR<Prisma.RideRequestCreateWithoutRiderInput, Prisma.RideRequestUncheckedCreateWithoutRiderInput> | Prisma.RideRequestCreateWithoutRiderInput[] | Prisma.RideRequestUncheckedCreateWithoutRiderInput[]
  connectOrCreate?: Prisma.RideRequestCreateOrConnectWithoutRiderInput | Prisma.RideRequestCreateOrConnectWithoutRiderInput[]
  createMany?: Prisma.RideRequestCreateManyRiderInputEnvelope
  connect?: Prisma.RideRequestWhereUniqueInput | Prisma.RideRequestWhereUniqueInput[]
}

export type RideRequestUpdateManyWithoutRiderNestedInput = {
  create?: Prisma.XOR<Prisma.RideRequestCreateWithoutRiderInput, Prisma.RideRequestUncheckedCreateWithoutRiderInput> | Prisma.RideRequestCreateWithoutRiderInput[] | Prisma.RideRequestUncheckedCreateWithoutRiderInput[]
  connectOrCreate?: Prisma.RideRequestCreateOrConnectWithoutRiderInput | Prisma.RideRequestCreateOrConnectWithoutRiderInput[]
  upsert?: Prisma.RideRequestUpsertWithWhereUniqueWithoutRiderInput | Prisma.RideRequestUpsertWithWhereUniqueWithoutRiderInput[]
  createMany?: Prisma.RideRequestCreateManyRiderInputEnvelope
  set?: Prisma.RideRequestWhereUniqueInput | Prisma.RideRequestWhereUniqueInput[]
  disconnect?: Prisma.RideRequestWhereUniqueInput | Prisma.RideRequestWhereUniqueInput[]
  delete?: Prisma.RideRequestWhereUniqueInput | Prisma.RideRequestWhereUniqueInput[]
  connect?: Prisma.RideRequestWhereUniqueInput | Prisma.RideRequestWhereUniqueInput[]
  update?: Prisma.RideRequestUpdateWithWhereUniqueWithoutRiderInput | Prisma.RideRequestUpdateWithWhereUniqueWithoutRiderInput[]
  updateMany?: Prisma.RideRequestUpdateManyWithWhereWithoutRiderInput | Prisma.RideRequestUpdateManyWithWhereWithoutRiderInput[]
  deleteMany?: Prisma.RideRequestScalarWhereInput | Prisma.RideRequestScalarWhereInput[]
}

export type RideRequestUncheckedUpdateManyWithoutRiderNestedInput = {
  create?: Prisma.XOR<Prisma.RideRequestCreateWithoutRiderInput, Prisma.RideRequestUncheckedCreateWithoutRiderInput> | Prisma.RideRequestCreateWithoutRiderInput[] | Prisma.RideRequestUncheckedCreateWithoutRiderInput[]
  connectOrCreate?: Prisma.RideRequestCreateOrConnectWithoutRiderInput | Prisma.RideRequestCreateOrConnectWithoutRiderInput[]
  upsert?: Prisma.RideRequestUpsertWithWhereUniqueWithoutRiderInput | Prisma.RideRequestUpsertWithWhereUniqueWithoutRiderInput[]
  createMany?: Prisma.RideRequestCreateManyRiderInputEnvelope
  set?: Prisma.RideRequestWhereUniqueInput | Prisma.RideRequestWhereUniqueInput[]
  disconnect?: Prisma.RideRequestWhereUniqueInput | Prisma.RideRequestWhereUniqueInput[]
  delete?: Prisma.RideRequestWhereUniqueInput | Prisma.RideRequestWhereUniqueInput[]
  connect?: Prisma.RideRequestWhereUniqueInput | Prisma.RideRequestWhereUniqueInput[]
  update?: Prisma.RideRequestUpdateWithWhereUniqueWithoutRiderInput | Prisma.RideRequestUpdateWithWhereUniqueWithoutRiderInput[]
  updateMany?: Prisma.RideRequestUpdateManyWithWhereWithoutRiderInput | Prisma.RideRequestUpdateManyWithWhereWithoutRiderInput[]
  deleteMany?: Prisma.RideRequestScalarWhereInput | Prisma.RideRequestScalarWhereInput[]
}

export type RideRequestCreateNestedManyWithoutRideInput = {
  create?: Prisma.XOR<Prisma.RideRequestCreateWithoutRideInput, Prisma.RideRequestUncheckedCreateWithoutRideInput> | Prisma.RideRequestCreateWithoutRideInput[] | Prisma.RideRequestUncheckedCreateWithoutRideInput[]
  connectOrCreate?: Prisma.RideRequestCreateOrConnectWithoutRideInput | Prisma.RideRequestCreateOrConnectWithoutRideInput[]
  createMany?: Prisma.RideRequestCreateManyRideInputEnvelope
  connect?: Prisma.RideRequestWhereUniqueInput | Prisma.RideRequestWhereUniqueInput[]
}

export type RideRequestUncheckedCreateNestedManyWithoutRideInput = {
  create?: Prisma.XOR<Prisma.RideRequestCreateWithoutRideInput, Prisma.RideRequestUncheckedCreateWithoutRideInput> | Prisma.RideRequestCreateWithoutRideInput[] | Prisma.RideRequestUncheckedCreateWithoutRideInput[]
  connectOrCreate?: Prisma.RideRequestCreateOrConnectWithoutRideInput | Prisma.RideRequestCreateOrConnectWithoutRideInput[]
  createMany?: Prisma.RideRequestCreateManyRideInputEnvelope
  connect?: Prisma.RideRequestWhereUniqueInput | Prisma.RideRequestWhereUniqueInput[]
}

export type RideRequestUpdateManyWithoutRideNestedInput = {
  create?: Prisma.XOR<Prisma.RideRequestCreateWithoutRideInput, Prisma.RideRequestUncheckedCreateWithoutRideInput> | Prisma.RideRequestCreateWithoutRideInput[] | Prisma.RideRequestUncheckedCreateWithoutRideInput[]
  connectOrCreate?: Prisma.RideRequestCreateOrConnectWithoutRideInput | Prisma.RideRequestCreateOrConnectWithoutRideInput[]
  upsert?: Prisma.RideRequestUpsertWithWhereUniqueWithoutRideInput | Prisma.RideRequestUpsertWithWhereUniqueWithoutRideInput[]
  createMany?: Prisma.RideRequestCreateManyRideInputEnvelope
  set?: Prisma.RideRequestWhereUniqueInput | Prisma.RideRequestWhereUniqueInput[]
  disconnect?: Prisma.RideRequestWhereUniqueInput | Prisma.RideRequestWhereUniqueInput[]
  delete?: Prisma.RideRequestWhereUniqueInput | Prisma.RideRequestWhereUniqueInput[]
  connect?: Prisma.RideRequestWhereUniqueInput | Prisma.RideRequestWhereUniqueInput[]
  update?: Prisma.RideRequestUpdateWithWhereUniqueWithoutRideInput | Prisma.RideRequestUpdateWithWhereUniqueWithoutRideInput[]
  updateMany?: Prisma.RideRequestUpdateManyWithWhereWithoutRideInput | Prisma.RideRequestUpdateManyWithWhereWithoutRideInput[]
  deleteMany?: Prisma.RideRequestScalarWhereInput | Prisma.RideRequestScalarWhereInput[]
}

export type RideRequestUncheckedUpdateManyWithoutRideNestedInput = {
  create?: Prisma.XOR<Prisma.RideRequestCreateWithoutRideInput, Prisma.RideRequestUncheckedCreateWithoutRideInput> | Prisma.RideRequestCreateWithoutRideInput[] | Prisma.RideRequestUncheckedCreateWithoutRideInput[]
  connectOrCreate?: Prisma.RideRequestCreateOrConnectWithoutRideInput | Prisma.RideRequestCreateOrConnectWithoutRideInput[]
  upsert?: Prisma.RideRequestUpsertWithWhereUniqueWithoutRideInput | Prisma.RideRequestUpsertWithWhereUniqueWithoutRideInput[]
  createMany?: Prisma.RideRequestCreateManyRideInputEnvelope
  set?: Prisma.RideRequestWhereUniqueInput | Prisma.RideRequestWhereUniqueInput[]
  disconnect?: Prisma.RideRequestWhereUniqueInput | Prisma.RideRequestWhereUniqueInput[]
  delete?: Prisma.RideRequestWhereUniqueInput | Prisma.RideRequestWhereUniqueInput[]
  connect?: Prisma.RideRequestWhereUniqueInput | Prisma.RideRequestWhereUniqueInput[]
  update?: Prisma.RideRequestUpdateWithWhereUniqueWithoutRideInput | Prisma.RideRequestUpdateWithWhereUniqueWithoutRideInput[]
  updateMany?: Prisma.RideRequestUpdateManyWithWhereWithoutRideInput | Prisma.RideRequestUpdateManyWithWhereWithoutRideInput[]
  deleteMany?: Prisma.RideRequestScalarWhereInput | Prisma.RideRequestScalarWhereInput[]
}

export type EnumRequestStatusFieldUpdateOperationsInput = {
  set?: $Enums.RequestStatus
}

export type NullableIntFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type RideRequestCreateWithoutRiderInput = {
  id?: string
  maxFare: number
  status?: $Enums.RequestStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  origin?: string | null
  destination?: string | null
  departureTime?: Date | string | null
  passengers?: number | null
  message?: string | null
  originLatitude?: number | null
  originLongitude?: number | null
  destLatitude?: number | null
  destLongitude?: number | null
  ride?: Prisma.RideCreateNestedOneWithoutRequestsInput
}

export type RideRequestUncheckedCreateWithoutRiderInput = {
  id?: string
  rideId?: string | null
  maxFare: number
  status?: $Enums.RequestStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  origin?: string | null
  destination?: string | null
  departureTime?: Date | string | null
  passengers?: number | null
  message?: string | null
  originLatitude?: number | null
  originLongitude?: number | null
  destLatitude?: number | null
  destLongitude?: number | null
}

export type RideRequestCreateOrConnectWithoutRiderInput = {
  where: Prisma.RideRequestWhereUniqueInput
  create: Prisma.XOR<Prisma.RideRequestCreateWithoutRiderInput, Prisma.RideRequestUncheckedCreateWithoutRiderInput>
}

export type RideRequestCreateManyRiderInputEnvelope = {
  data: Prisma.RideRequestCreateManyRiderInput | Prisma.RideRequestCreateManyRiderInput[]
  skipDuplicates?: boolean
}

export type RideRequestUpsertWithWhereUniqueWithoutRiderInput = {
  where: Prisma.RideRequestWhereUniqueInput
  update: Prisma.XOR<Prisma.RideRequestUpdateWithoutRiderInput, Prisma.RideRequestUncheckedUpdateWithoutRiderInput>
  create: Prisma.XOR<Prisma.RideRequestCreateWithoutRiderInput, Prisma.RideRequestUncheckedCreateWithoutRiderInput>
}

export type RideRequestUpdateWithWhereUniqueWithoutRiderInput = {
  where: Prisma.RideRequestWhereUniqueInput
  data: Prisma.XOR<Prisma.RideRequestUpdateWithoutRiderInput, Prisma.RideRequestUncheckedUpdateWithoutRiderInput>
}

export type RideRequestUpdateManyWithWhereWithoutRiderInput = {
  where: Prisma.RideRequestScalarWhereInput
  data: Prisma.XOR<Prisma.RideRequestUpdateManyMutationInput, Prisma.RideRequestUncheckedUpdateManyWithoutRiderInput>
}

export type RideRequestScalarWhereInput = {
  AND?: Prisma.RideRequestScalarWhereInput | Prisma.RideRequestScalarWhereInput[]
  OR?: Prisma.RideRequestScalarWhereInput[]
  NOT?: Prisma.RideRequestScalarWhereInput | Prisma.RideRequestScalarWhereInput[]
  id?: Prisma.StringFilter<"RideRequest"> | string
  riderId?: Prisma.StringFilter<"RideRequest"> | string
  rideId?: Prisma.StringNullableFilter<"RideRequest"> | string | null
  maxFare?: Prisma.FloatFilter<"RideRequest"> | number
  status?: Prisma.EnumRequestStatusFilter<"RideRequest"> | $Enums.RequestStatus
  createdAt?: Prisma.DateTimeFilter<"RideRequest"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"RideRequest"> | Date | string
  origin?: Prisma.StringNullableFilter<"RideRequest"> | string | null
  destination?: Prisma.StringNullableFilter<"RideRequest"> | string | null
  departureTime?: Prisma.DateTimeNullableFilter<"RideRequest"> | Date | string | null
  passengers?: Prisma.IntNullableFilter<"RideRequest"> | number | null
  message?: Prisma.StringNullableFilter<"RideRequest"> | string | null
  originLatitude?: Prisma.FloatNullableFilter<"RideRequest"> | number | null
  originLongitude?: Prisma.FloatNullableFilter<"RideRequest"> | number | null
  destLatitude?: Prisma.FloatNullableFilter<"RideRequest"> | number | null
  destLongitude?: Prisma.FloatNullableFilter<"RideRequest"> | number | null
}

export type RideRequestCreateWithoutRideInput = {
  id?: string
  maxFare: number
  status?: $Enums.RequestStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  origin?: string | null
  destination?: string | null
  departureTime?: Date | string | null
  passengers?: number | null
  message?: string | null
  originLatitude?: number | null
  originLongitude?: number | null
  destLatitude?: number | null
  destLongitude?: number | null
  rider: Prisma.UserCreateNestedOneWithoutRidesAsRiderInput
}

export type RideRequestUncheckedCreateWithoutRideInput = {
  id?: string
  riderId: string
  maxFare: number
  status?: $Enums.RequestStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  origin?: string | null
  destination?: string | null
  departureTime?: Date | string | null
  passengers?: number | null
  message?: string | null
  originLatitude?: number | null
  originLongitude?: number | null
  destLatitude?: number | null
  destLongitude?: number | null
}

export type RideRequestCreateOrConnectWithoutRideInput = {
  where: Prisma.RideRequestWhereUniqueInput
  create: Prisma.XOR<Prisma.RideRequestCreateWithoutRideInput, Prisma.RideRequestUncheckedCreateWithoutRideInput>
}

export type RideRequestCreateManyRideInputEnvelope = {
  data: Prisma.RideRequestCreateManyRideInput | Prisma.RideRequestCreateManyRideInput[]
  skipDuplicates?: boolean
}

export type RideRequestUpsertWithWhereUniqueWithoutRideInput = {
  where: Prisma.RideRequestWhereUniqueInput
  update: Prisma.XOR<Prisma.RideRequestUpdateWithoutRideInput, Prisma.RideRequestUncheckedUpdateWithoutRideInput>
  create: Prisma.XOR<Prisma.RideRequestCreateWithoutRideInput, Prisma.RideRequestUncheckedCreateWithoutRideInput>
}

export type RideRequestUpdateWithWhereUniqueWithoutRideInput = {
  where: Prisma.RideRequestWhereUniqueInput
  data: Prisma.XOR<Prisma.RideRequestUpdateWithoutRideInput, Prisma.RideRequestUncheckedUpdateWithoutRideInput>
}

export type RideRequestUpdateManyWithWhereWithoutRideInput = {
  where: Prisma.RideRequestScalarWhereInput
  data: Prisma.XOR<Prisma.RideRequestUpdateManyMutationInput, Prisma.RideRequestUncheckedUpdateManyWithoutRideInput>
}

export type RideRequestCreateManyRiderInput = {
  id?: string
  rideId?: string | null
  maxFare: number
  status?: $Enums.RequestStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  origin?: string | null
  destination?: string | null
  departureTime?: Date | string | null
  passengers?: number | null
  message?: string | null
  originLatitude?: number | null
  originLongitude?: number | null
  destLatitude?: number | null
  destLongitude?: number | null
}

export type RideRequestUpdateWithoutRiderInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  maxFare?: Prisma.FloatFieldUpdateOperationsInput | number
  status?: Prisma.EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  origin?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  destination?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  departureTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  passengers?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  message?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  originLatitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  originLongitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  destLatitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  destLongitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  ride?: Prisma.RideUpdateOneWithoutRequestsNestedInput
}

export type RideRequestUncheckedUpdateWithoutRiderInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  rideId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  maxFare?: Prisma.FloatFieldUpdateOperationsInput | number
  status?: Prisma.EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  origin?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  destination?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  departureTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  passengers?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  message?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  originLatitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  originLongitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  destLatitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  destLongitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
}

export type RideRequestUncheckedUpdateManyWithoutRiderInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  rideId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  maxFare?: Prisma.FloatFieldUpdateOperationsInput | number
  status?: Prisma.EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  origin?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  destination?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  departureTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  passengers?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  message?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  originLatitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  originLongitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  destLatitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  destLongitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
}

export type RideRequestCreateManyRideInput = {
  id?: string
  riderId: string
  maxFare: number
  status?: $Enums.RequestStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  origin?: string | null
  destination?: string | null
  departureTime?: Date | string | null
  passengers?: number | null
  message?: string | null
  originLatitude?: number | null
  originLongitude?: number | null
  destLatitude?: number | null
  destLongitude?: number | null
}

export type RideRequestUpdateWithoutRideInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  maxFare?: Prisma.FloatFieldUpdateOperationsInput | number
  status?: Prisma.EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  origin?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  destination?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  departureTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  passengers?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  message?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  originLatitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  originLongitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  destLatitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  destLongitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  rider?: Prisma.UserUpdateOneRequiredWithoutRidesAsRiderNestedInput
}

export type RideRequestUncheckedUpdateWithoutRideInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  riderId?: Prisma.StringFieldUpdateOperationsInput | string
  maxFare?: Prisma.FloatFieldUpdateOperationsInput | number
  status?: Prisma.EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  origin?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  destination?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  departureTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  passengers?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  message?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  originLatitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  originLongitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  destLatitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  destLongitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
}

export type RideRequestUncheckedUpdateManyWithoutRideInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  riderId?: Prisma.StringFieldUpdateOperationsInput | string
  maxFare?: Prisma.FloatFieldUpdateOperationsInput | number
  status?: Prisma.EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  origin?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  destination?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  departureTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  passengers?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  message?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  originLatitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  originLongitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  destLatitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  destLongitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
}



export type RideRequestSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  riderId?: boolean
  rideId?: boolean
  maxFare?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  origin?: boolean
  destination?: boolean
  departureTime?: boolean
  passengers?: boolean
  message?: boolean
  originLatitude?: boolean
  originLongitude?: boolean
  destLatitude?: boolean
  destLongitude?: boolean
  rider?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  ride?: boolean | Prisma.RideRequest$rideArgs<ExtArgs>
}, ExtArgs["result"]["rideRequest"]>

export type RideRequestSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  riderId?: boolean
  rideId?: boolean
  maxFare?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  origin?: boolean
  destination?: boolean
  departureTime?: boolean
  passengers?: boolean
  message?: boolean
  originLatitude?: boolean
  originLongitude?: boolean
  destLatitude?: boolean
  destLongitude?: boolean
  rider?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  ride?: boolean | Prisma.RideRequest$rideArgs<ExtArgs>
}, ExtArgs["result"]["rideRequest"]>

export type RideRequestSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  riderId?: boolean
  rideId?: boolean
  maxFare?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  origin?: boolean
  destination?: boolean
  departureTime?: boolean
  passengers?: boolean
  message?: boolean
  originLatitude?: boolean
  originLongitude?: boolean
  destLatitude?: boolean
  destLongitude?: boolean
  rider?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  ride?: boolean | Prisma.RideRequest$rideArgs<ExtArgs>
}, ExtArgs["result"]["rideRequest"]>

export type RideRequestSelectScalar = {
  id?: boolean
  riderId?: boolean
  rideId?: boolean
  maxFare?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  origin?: boolean
  destination?: boolean
  departureTime?: boolean
  passengers?: boolean
  message?: boolean
  originLatitude?: boolean
  originLongitude?: boolean
  destLatitude?: boolean
  destLongitude?: boolean
}

export type RideRequestOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "riderId" | "rideId" | "maxFare" | "status" | "createdAt" | "updatedAt" | "origin" | "destination" | "departureTime" | "passengers" | "message" | "originLatitude" | "originLongitude" | "destLatitude" | "destLongitude", ExtArgs["result"]["rideRequest"]>
export type RideRequestInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  rider?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  ride?: boolean | Prisma.RideRequest$rideArgs<ExtArgs>
}
export type RideRequestIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  rider?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  ride?: boolean | Prisma.RideRequest$rideArgs<ExtArgs>
}
export type RideRequestIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  rider?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  ride?: boolean | Prisma.RideRequest$rideArgs<ExtArgs>
}

export type $RideRequestPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "RideRequest"
  objects: {
    rider: Prisma.$UserPayload<ExtArgs>
    ride: Prisma.$RidePayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    riderId: string
    rideId: string | null
    maxFare: number
    status: $Enums.RequestStatus
    createdAt: Date
    updatedAt: Date
    origin: string | null
    destination: string | null
    departureTime: Date | null
    passengers: number | null
    message: string | null
    originLatitude: number | null
    originLongitude: number | null
    destLatitude: number | null
    destLongitude: number | null
  }, ExtArgs["result"]["rideRequest"]>
  composites: {}
}

export type RideRequestGetPayload<S extends boolean | null | undefined | RideRequestDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$RideRequestPayload, S>

export type RideRequestCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<RideRequestFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: RideRequestCountAggregateInputType | true
  }

export interface RideRequestDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RideRequest'], meta: { name: 'RideRequest' } }
  /**
   * Find zero or one RideRequest that matches the filter.
   * @param {RideRequestFindUniqueArgs} args - Arguments to find a RideRequest
   * @example
   * // Get one RideRequest
   * const rideRequest = await prisma.rideRequest.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends RideRequestFindUniqueArgs>(args: Prisma.SelectSubset<T, RideRequestFindUniqueArgs<ExtArgs>>): Prisma.Prisma__RideRequestClient<runtime.Types.Result.GetResult<Prisma.$RideRequestPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one RideRequest that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {RideRequestFindUniqueOrThrowArgs} args - Arguments to find a RideRequest
   * @example
   * // Get one RideRequest
   * const rideRequest = await prisma.rideRequest.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends RideRequestFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, RideRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__RideRequestClient<runtime.Types.Result.GetResult<Prisma.$RideRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first RideRequest that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RideRequestFindFirstArgs} args - Arguments to find a RideRequest
   * @example
   * // Get one RideRequest
   * const rideRequest = await prisma.rideRequest.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends RideRequestFindFirstArgs>(args?: Prisma.SelectSubset<T, RideRequestFindFirstArgs<ExtArgs>>): Prisma.Prisma__RideRequestClient<runtime.Types.Result.GetResult<Prisma.$RideRequestPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first RideRequest that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RideRequestFindFirstOrThrowArgs} args - Arguments to find a RideRequest
   * @example
   * // Get one RideRequest
   * const rideRequest = await prisma.rideRequest.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends RideRequestFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, RideRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__RideRequestClient<runtime.Types.Result.GetResult<Prisma.$RideRequestPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more RideRequests that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RideRequestFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all RideRequests
   * const rideRequests = await prisma.rideRequest.findMany()
   * 
   * // Get first 10 RideRequests
   * const rideRequests = await prisma.rideRequest.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const rideRequestWithIdOnly = await prisma.rideRequest.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends RideRequestFindManyArgs>(args?: Prisma.SelectSubset<T, RideRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RideRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a RideRequest.
   * @param {RideRequestCreateArgs} args - Arguments to create a RideRequest.
   * @example
   * // Create one RideRequest
   * const RideRequest = await prisma.rideRequest.create({
   *   data: {
   *     // ... data to create a RideRequest
   *   }
   * })
   * 
   */
  create<T extends RideRequestCreateArgs>(args: Prisma.SelectSubset<T, RideRequestCreateArgs<ExtArgs>>): Prisma.Prisma__RideRequestClient<runtime.Types.Result.GetResult<Prisma.$RideRequestPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many RideRequests.
   * @param {RideRequestCreateManyArgs} args - Arguments to create many RideRequests.
   * @example
   * // Create many RideRequests
   * const rideRequest = await prisma.rideRequest.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends RideRequestCreateManyArgs>(args?: Prisma.SelectSubset<T, RideRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many RideRequests and returns the data saved in the database.
   * @param {RideRequestCreateManyAndReturnArgs} args - Arguments to create many RideRequests.
   * @example
   * // Create many RideRequests
   * const rideRequest = await prisma.rideRequest.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many RideRequests and only return the `id`
   * const rideRequestWithIdOnly = await prisma.rideRequest.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends RideRequestCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, RideRequestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RideRequestPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a RideRequest.
   * @param {RideRequestDeleteArgs} args - Arguments to delete one RideRequest.
   * @example
   * // Delete one RideRequest
   * const RideRequest = await prisma.rideRequest.delete({
   *   where: {
   *     // ... filter to delete one RideRequest
   *   }
   * })
   * 
   */
  delete<T extends RideRequestDeleteArgs>(args: Prisma.SelectSubset<T, RideRequestDeleteArgs<ExtArgs>>): Prisma.Prisma__RideRequestClient<runtime.Types.Result.GetResult<Prisma.$RideRequestPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one RideRequest.
   * @param {RideRequestUpdateArgs} args - Arguments to update one RideRequest.
   * @example
   * // Update one RideRequest
   * const rideRequest = await prisma.rideRequest.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends RideRequestUpdateArgs>(args: Prisma.SelectSubset<T, RideRequestUpdateArgs<ExtArgs>>): Prisma.Prisma__RideRequestClient<runtime.Types.Result.GetResult<Prisma.$RideRequestPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more RideRequests.
   * @param {RideRequestDeleteManyArgs} args - Arguments to filter RideRequests to delete.
   * @example
   * // Delete a few RideRequests
   * const { count } = await prisma.rideRequest.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends RideRequestDeleteManyArgs>(args?: Prisma.SelectSubset<T, RideRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more RideRequests.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RideRequestUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many RideRequests
   * const rideRequest = await prisma.rideRequest.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends RideRequestUpdateManyArgs>(args: Prisma.SelectSubset<T, RideRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more RideRequests and returns the data updated in the database.
   * @param {RideRequestUpdateManyAndReturnArgs} args - Arguments to update many RideRequests.
   * @example
   * // Update many RideRequests
   * const rideRequest = await prisma.rideRequest.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more RideRequests and only return the `id`
   * const rideRequestWithIdOnly = await prisma.rideRequest.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends RideRequestUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, RideRequestUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RideRequestPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one RideRequest.
   * @param {RideRequestUpsertArgs} args - Arguments to update or create a RideRequest.
   * @example
   * // Update or create a RideRequest
   * const rideRequest = await prisma.rideRequest.upsert({
   *   create: {
   *     // ... data to create a RideRequest
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the RideRequest we want to update
   *   }
   * })
   */
  upsert<T extends RideRequestUpsertArgs>(args: Prisma.SelectSubset<T, RideRequestUpsertArgs<ExtArgs>>): Prisma.Prisma__RideRequestClient<runtime.Types.Result.GetResult<Prisma.$RideRequestPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of RideRequests.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RideRequestCountArgs} args - Arguments to filter RideRequests to count.
   * @example
   * // Count the number of RideRequests
   * const count = await prisma.rideRequest.count({
   *   where: {
   *     // ... the filter for the RideRequests we want to count
   *   }
   * })
  **/
  count<T extends RideRequestCountArgs>(
    args?: Prisma.Subset<T, RideRequestCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], RideRequestCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a RideRequest.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RideRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends RideRequestAggregateArgs>(args: Prisma.Subset<T, RideRequestAggregateArgs>): Prisma.PrismaPromise<GetRideRequestAggregateType<T>>

  /**
   * Group by RideRequest.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RideRequestGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends RideRequestGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: RideRequestGroupByArgs['orderBy'] }
      : { orderBy?: RideRequestGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, RideRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRideRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the RideRequest model
 */
readonly fields: RideRequestFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for RideRequest.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__RideRequestClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  rider<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  ride<T extends Prisma.RideRequest$rideArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.RideRequest$rideArgs<ExtArgs>>): Prisma.Prisma__RideClient<runtime.Types.Result.GetResult<Prisma.$RidePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the RideRequest model
 */
export interface RideRequestFieldRefs {
  readonly id: Prisma.FieldRef<"RideRequest", 'String'>
  readonly riderId: Prisma.FieldRef<"RideRequest", 'String'>
  readonly rideId: Prisma.FieldRef<"RideRequest", 'String'>
  readonly maxFare: Prisma.FieldRef<"RideRequest", 'Float'>
  readonly status: Prisma.FieldRef<"RideRequest", 'RequestStatus'>
  readonly createdAt: Prisma.FieldRef<"RideRequest", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"RideRequest", 'DateTime'>
  readonly origin: Prisma.FieldRef<"RideRequest", 'String'>
  readonly destination: Prisma.FieldRef<"RideRequest", 'String'>
  readonly departureTime: Prisma.FieldRef<"RideRequest", 'DateTime'>
  readonly passengers: Prisma.FieldRef<"RideRequest", 'Int'>
  readonly message: Prisma.FieldRef<"RideRequest", 'String'>
  readonly originLatitude: Prisma.FieldRef<"RideRequest", 'Float'>
  readonly originLongitude: Prisma.FieldRef<"RideRequest", 'Float'>
  readonly destLatitude: Prisma.FieldRef<"RideRequest", 'Float'>
  readonly destLongitude: Prisma.FieldRef<"RideRequest", 'Float'>
}
    

// Custom InputTypes
/**
 * RideRequest findUnique
 */
export type RideRequestFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RideRequest
   */
  select?: Prisma.RideRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RideRequest
   */
  omit?: Prisma.RideRequestOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RideRequestInclude<ExtArgs> | null
  /**
   * Filter, which RideRequest to fetch.
   */
  where: Prisma.RideRequestWhereUniqueInput
}

/**
 * RideRequest findUniqueOrThrow
 */
export type RideRequestFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RideRequest
   */
  select?: Prisma.RideRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RideRequest
   */
  omit?: Prisma.RideRequestOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RideRequestInclude<ExtArgs> | null
  /**
   * Filter, which RideRequest to fetch.
   */
  where: Prisma.RideRequestWhereUniqueInput
}

/**
 * RideRequest findFirst
 */
export type RideRequestFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RideRequest
   */
  select?: Prisma.RideRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RideRequest
   */
  omit?: Prisma.RideRequestOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RideRequestInclude<ExtArgs> | null
  /**
   * Filter, which RideRequest to fetch.
   */
  where?: Prisma.RideRequestWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of RideRequests to fetch.
   */
  orderBy?: Prisma.RideRequestOrderByWithRelationInput | Prisma.RideRequestOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for RideRequests.
   */
  cursor?: Prisma.RideRequestWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` RideRequests from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` RideRequests.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of RideRequests.
   */
  distinct?: Prisma.RideRequestScalarFieldEnum | Prisma.RideRequestScalarFieldEnum[]
}

/**
 * RideRequest findFirstOrThrow
 */
export type RideRequestFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RideRequest
   */
  select?: Prisma.RideRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RideRequest
   */
  omit?: Prisma.RideRequestOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RideRequestInclude<ExtArgs> | null
  /**
   * Filter, which RideRequest to fetch.
   */
  where?: Prisma.RideRequestWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of RideRequests to fetch.
   */
  orderBy?: Prisma.RideRequestOrderByWithRelationInput | Prisma.RideRequestOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for RideRequests.
   */
  cursor?: Prisma.RideRequestWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` RideRequests from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` RideRequests.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of RideRequests.
   */
  distinct?: Prisma.RideRequestScalarFieldEnum | Prisma.RideRequestScalarFieldEnum[]
}

/**
 * RideRequest findMany
 */
export type RideRequestFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RideRequest
   */
  select?: Prisma.RideRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RideRequest
   */
  omit?: Prisma.RideRequestOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RideRequestInclude<ExtArgs> | null
  /**
   * Filter, which RideRequests to fetch.
   */
  where?: Prisma.RideRequestWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of RideRequests to fetch.
   */
  orderBy?: Prisma.RideRequestOrderByWithRelationInput | Prisma.RideRequestOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing RideRequests.
   */
  cursor?: Prisma.RideRequestWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` RideRequests from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` RideRequests.
   */
  skip?: number
  distinct?: Prisma.RideRequestScalarFieldEnum | Prisma.RideRequestScalarFieldEnum[]
}

/**
 * RideRequest create
 */
export type RideRequestCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RideRequest
   */
  select?: Prisma.RideRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RideRequest
   */
  omit?: Prisma.RideRequestOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RideRequestInclude<ExtArgs> | null
  /**
   * The data needed to create a RideRequest.
   */
  data: Prisma.XOR<Prisma.RideRequestCreateInput, Prisma.RideRequestUncheckedCreateInput>
}

/**
 * RideRequest createMany
 */
export type RideRequestCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many RideRequests.
   */
  data: Prisma.RideRequestCreateManyInput | Prisma.RideRequestCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * RideRequest createManyAndReturn
 */
export type RideRequestCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RideRequest
   */
  select?: Prisma.RideRequestSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the RideRequest
   */
  omit?: Prisma.RideRequestOmit<ExtArgs> | null
  /**
   * The data used to create many RideRequests.
   */
  data: Prisma.RideRequestCreateManyInput | Prisma.RideRequestCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RideRequestIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * RideRequest update
 */
export type RideRequestUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RideRequest
   */
  select?: Prisma.RideRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RideRequest
   */
  omit?: Prisma.RideRequestOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RideRequestInclude<ExtArgs> | null
  /**
   * The data needed to update a RideRequest.
   */
  data: Prisma.XOR<Prisma.RideRequestUpdateInput, Prisma.RideRequestUncheckedUpdateInput>
  /**
   * Choose, which RideRequest to update.
   */
  where: Prisma.RideRequestWhereUniqueInput
}

/**
 * RideRequest updateMany
 */
export type RideRequestUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update RideRequests.
   */
  data: Prisma.XOR<Prisma.RideRequestUpdateManyMutationInput, Prisma.RideRequestUncheckedUpdateManyInput>
  /**
   * Filter which RideRequests to update
   */
  where?: Prisma.RideRequestWhereInput
  /**
   * Limit how many RideRequests to update.
   */
  limit?: number
}

/**
 * RideRequest updateManyAndReturn
 */
export type RideRequestUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RideRequest
   */
  select?: Prisma.RideRequestSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the RideRequest
   */
  omit?: Prisma.RideRequestOmit<ExtArgs> | null
  /**
   * The data used to update RideRequests.
   */
  data: Prisma.XOR<Prisma.RideRequestUpdateManyMutationInput, Prisma.RideRequestUncheckedUpdateManyInput>
  /**
   * Filter which RideRequests to update
   */
  where?: Prisma.RideRequestWhereInput
  /**
   * Limit how many RideRequests to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RideRequestIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * RideRequest upsert
 */
export type RideRequestUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RideRequest
   */
  select?: Prisma.RideRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RideRequest
   */
  omit?: Prisma.RideRequestOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RideRequestInclude<ExtArgs> | null
  /**
   * The filter to search for the RideRequest to update in case it exists.
   */
  where: Prisma.RideRequestWhereUniqueInput
  /**
   * In case the RideRequest found by the `where` argument doesn't exist, create a new RideRequest with this data.
   */
  create: Prisma.XOR<Prisma.RideRequestCreateInput, Prisma.RideRequestUncheckedCreateInput>
  /**
   * In case the RideRequest was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.RideRequestUpdateInput, Prisma.RideRequestUncheckedUpdateInput>
}

/**
 * RideRequest delete
 */
export type RideRequestDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RideRequest
   */
  select?: Prisma.RideRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RideRequest
   */
  omit?: Prisma.RideRequestOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RideRequestInclude<ExtArgs> | null
  /**
   * Filter which RideRequest to delete.
   */
  where: Prisma.RideRequestWhereUniqueInput
}

/**
 * RideRequest deleteMany
 */
export type RideRequestDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which RideRequests to delete
   */
  where?: Prisma.RideRequestWhereInput
  /**
   * Limit how many RideRequests to delete.
   */
  limit?: number
}

/**
 * RideRequest.ride
 */
export type RideRequest$rideArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ride
   */
  select?: Prisma.RideSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Ride
   */
  omit?: Prisma.RideOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RideInclude<ExtArgs> | null
  where?: Prisma.RideWhereInput
}

/**
 * RideRequest without action
 */
export type RideRequestDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RideRequest
   */
  select?: Prisma.RideRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RideRequest
   */
  omit?: Prisma.RideRequestOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RideRequestInclude<ExtArgs> | null
}


/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Ride` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Ride
 * 
 */
export type RideModel = runtime.Types.Result.DefaultSelection<Prisma.$RidePayload>

export type AggregateRide = {
  _count: RideCountAggregateOutputType | null
  _avg: RideAvgAggregateOutputType | null
  _sum: RideSumAggregateOutputType | null
  _min: RideMinAggregateOutputType | null
  _max: RideMaxAggregateOutputType | null
}

export type RideAvgAggregateOutputType = {
  seats: number | null
  fare: number | null
  originLatitude: number | null
  originLongitude: number | null
  destLatitude: number | null
  destLongitude: number | null
  proposedFare: number | null
  acceptedFare: number | null
}

export type RideSumAggregateOutputType = {
  seats: number | null
  fare: number | null
  originLatitude: number | null
  originLongitude: number | null
  destLatitude: number | null
  destLongitude: number | null
  proposedFare: number | null
  acceptedFare: number | null
}

export type RideMinAggregateOutputType = {
  id: string | null
  driverId: string | null
  origin: string | null
  destination: string | null
  departureTime: Date | null
  seats: number | null
  fare: number | null
  status: $Enums.RideStatus | null
  createdAt: Date | null
  updatedAt: Date | null
  originLatitude: number | null
  originLongitude: number | null
  destLatitude: number | null
  destLongitude: number | null
  proposedFare: number | null
  acceptedFare: number | null
}

export type RideMaxAggregateOutputType = {
  id: string | null
  driverId: string | null
  origin: string | null
  destination: string | null
  departureTime: Date | null
  seats: number | null
  fare: number | null
  status: $Enums.RideStatus | null
  createdAt: Date | null
  updatedAt: Date | null
  originLatitude: number | null
  originLongitude: number | null
  destLatitude: number | null
  destLongitude: number | null
  proposedFare: number | null
  acceptedFare: number | null
}

export type RideCountAggregateOutputType = {
  id: number
  driverId: number
  origin: number
  destination: number
  departureTime: number
  seats: number
  fare: number
  status: number
  createdAt: number
  updatedAt: number
  originLatitude: number
  originLongitude: number
  destLatitude: number
  destLongitude: number
  proposedFare: number
  acceptedFare: number
  bargainHistory: number
  _all: number
}


export type RideAvgAggregateInputType = {
  seats?: true
  fare?: true
  originLatitude?: true
  originLongitude?: true
  destLatitude?: true
  destLongitude?: true
  proposedFare?: true
  acceptedFare?: true
}

export type RideSumAggregateInputType = {
  seats?: true
  fare?: true
  originLatitude?: true
  originLongitude?: true
  destLatitude?: true
  destLongitude?: true
  proposedFare?: true
  acceptedFare?: true
}

export type RideMinAggregateInputType = {
  id?: true
  driverId?: true
  origin?: true
  destination?: true
  departureTime?: true
  seats?: true
  fare?: true
  status?: true
  createdAt?: true
  updatedAt?: true
  originLatitude?: true
  originLongitude?: true
  destLatitude?: true
  destLongitude?: true
  proposedFare?: true
  acceptedFare?: true
}

export type RideMaxAggregateInputType = {
  id?: true
  driverId?: true
  origin?: true
  destination?: true
  departureTime?: true
  seats?: true
  fare?: true
  status?: true
  createdAt?: true
  updatedAt?: true
  originLatitude?: true
  originLongitude?: true
  destLatitude?: true
  destLongitude?: true
  proposedFare?: true
  acceptedFare?: true
}

export type RideCountAggregateInputType = {
  id?: true
  driverId?: true
  origin?: true
  destination?: true
  departureTime?: true
  seats?: true
  fare?: true
  status?: true
  createdAt?: true
  updatedAt?: true
  originLatitude?: true
  originLongitude?: true
  destLatitude?: true
  destLongitude?: true
  proposedFare?: true
  acceptedFare?: true
  bargainHistory?: true
  _all?: true
}

export type RideAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Ride to aggregate.
   */
  where?: Prisma.RideWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Rides to fetch.
   */
  orderBy?: Prisma.RideOrderByWithRelationInput | Prisma.RideOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.RideWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Rides from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Rides.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Rides
  **/
  _count?: true | RideCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: RideAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: RideSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: RideMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: RideMaxAggregateInputType
}

export type GetRideAggregateType<T extends RideAggregateArgs> = {
      [P in keyof T & keyof AggregateRide]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateRide[P]>
    : Prisma.GetScalarType<T[P], AggregateRide[P]>
}




export type RideGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.RideWhereInput
  orderBy?: Prisma.RideOrderByWithAggregationInput | Prisma.RideOrderByWithAggregationInput[]
  by: Prisma.RideScalarFieldEnum[] | Prisma.RideScalarFieldEnum
  having?: Prisma.RideScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: RideCountAggregateInputType | true
  _avg?: RideAvgAggregateInputType
  _sum?: RideSumAggregateInputType
  _min?: RideMinAggregateInputType
  _max?: RideMaxAggregateInputType
}

export type RideGroupByOutputType = {
  id: string
  driverId: string
  origin: string
  destination: string
  departureTime: Date
  seats: number
  fare: number
  status: $Enums.RideStatus
  createdAt: Date
  updatedAt: Date
  originLatitude: number | null
  originLongitude: number | null
  destLatitude: number | null
  destLongitude: number | null
  proposedFare: number | null
  acceptedFare: number | null
  bargainHistory: runtime.JsonValue | null
  _count: RideCountAggregateOutputType | null
  _avg: RideAvgAggregateOutputType | null
  _sum: RideSumAggregateOutputType | null
  _min: RideMinAggregateOutputType | null
  _max: RideMaxAggregateOutputType | null
}

type GetRideGroupByPayload<T extends RideGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<RideGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof RideGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], RideGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], RideGroupByOutputType[P]>
      }
    >
  >



export type RideWhereInput = {
  AND?: Prisma.RideWhereInput | Prisma.RideWhereInput[]
  OR?: Prisma.RideWhereInput[]
  NOT?: Prisma.RideWhereInput | Prisma.RideWhereInput[]
  id?: Prisma.StringFilter<"Ride"> | string
  driverId?: Prisma.StringFilter<"Ride"> | string
  origin?: Prisma.StringFilter<"Ride"> | string
  destination?: Prisma.StringFilter<"Ride"> | string
  departureTime?: Prisma.DateTimeFilter<"Ride"> | Date | string
  seats?: Prisma.IntFilter<"Ride"> | number
  fare?: Prisma.FloatFilter<"Ride"> | number
  status?: Prisma.EnumRideStatusFilter<"Ride"> | $Enums.RideStatus
  createdAt?: Prisma.DateTimeFilter<"Ride"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Ride"> | Date | string
  originLatitude?: Prisma.FloatNullableFilter<"Ride"> | number | null
  originLongitude?: Prisma.FloatNullableFilter<"Ride"> | number | null
  destLatitude?: Prisma.FloatNullableFilter<"Ride"> | number | null
  destLongitude?: Prisma.FloatNullableFilter<"Ride"> | number | null
  proposedFare?: Prisma.FloatNullableFilter<"Ride"> | number | null
  acceptedFare?: Prisma.FloatNullableFilter<"Ride"> | number | null
  bargainHistory?: Prisma.JsonNullableFilter<"Ride">
  driver?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  requests?: Prisma.RideRequestListRelationFilter
  offers?: Prisma.OfferListRelationFilter
}

export type RideOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  driverId?: Prisma.SortOrder
  origin?: Prisma.SortOrder
  destination?: Prisma.SortOrder
  departureTime?: Prisma.SortOrder
  seats?: Prisma.SortOrder
  fare?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  originLatitude?: Prisma.SortOrderInput | Prisma.SortOrder
  originLongitude?: Prisma.SortOrderInput | Prisma.SortOrder
  destLatitude?: Prisma.SortOrderInput | Prisma.SortOrder
  destLongitude?: Prisma.SortOrderInput | Prisma.SortOrder
  proposedFare?: Prisma.SortOrderInput | Prisma.SortOrder
  acceptedFare?: Prisma.SortOrderInput | Prisma.SortOrder
  bargainHistory?: Prisma.SortOrderInput | Prisma.SortOrder
  driver?: Prisma.UserOrderByWithRelationInput
  requests?: Prisma.RideRequestOrderByRelationAggregateInput
  offers?: Prisma.OfferOrderByRelationAggregateInput
}

export type RideWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.RideWhereInput | Prisma.RideWhereInput[]
  OR?: Prisma.RideWhereInput[]
  NOT?: Prisma.RideWhereInput | Prisma.RideWhereInput[]
  driverId?: Prisma.StringFilter<"Ride"> | string
  origin?: Prisma.StringFilter<"Ride"> | string
  destination?: Prisma.StringFilter<"Ride"> | string
  departureTime?: Prisma.DateTimeFilter<"Ride"> | Date | string
  seats?: Prisma.IntFilter<"Ride"> | number
  fare?: Prisma.FloatFilter<"Ride"> | number
  status?: Prisma.EnumRideStatusFilter<"Ride"> | $Enums.RideStatus
  createdAt?: Prisma.DateTimeFilter<"Ride"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Ride"> | Date | string
  originLatitude?: Prisma.FloatNullableFilter<"Ride"> | number | null
  originLongitude?: Prisma.FloatNullableFilter<"Ride"> | number | null
  destLatitude?: Prisma.FloatNullableFilter<"Ride"> | number | null
  destLongitude?: Prisma.FloatNullableFilter<"Ride"> | number | null
  proposedFare?: Prisma.FloatNullableFilter<"Ride"> | number | null
  acceptedFare?: Prisma.FloatNullableFilter<"Ride"> | number | null
  bargainHistory?: Prisma.JsonNullableFilter<"Ride">
  driver?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  requests?: Prisma.RideRequestListRelationFilter
  offers?: Prisma.OfferListRelationFilter
}, "id">

export type RideOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  driverId?: Prisma.SortOrder
  origin?: Prisma.SortOrder
  destination?: Prisma.SortOrder
  departureTime?: Prisma.SortOrder
  seats?: Prisma.SortOrder
  fare?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  originLatitude?: Prisma.SortOrderInput | Prisma.SortOrder
  originLongitude?: Prisma.SortOrderInput | Prisma.SortOrder
  destLatitude?: Prisma.SortOrderInput | Prisma.SortOrder
  destLongitude?: Prisma.SortOrderInput | Prisma.SortOrder
  proposedFare?: Prisma.SortOrderInput | Prisma.SortOrder
  acceptedFare?: Prisma.SortOrderInput | Prisma.SortOrder
  bargainHistory?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.RideCountOrderByAggregateInput
  _avg?: Prisma.RideAvgOrderByAggregateInput
  _max?: Prisma.RideMaxOrderByAggregateInput
  _min?: Prisma.RideMinOrderByAggregateInput
  _sum?: Prisma.RideSumOrderByAggregateInput
}

export type RideScalarWhereWithAggregatesInput = {
  AND?: Prisma.RideScalarWhereWithAggregatesInput | Prisma.RideScalarWhereWithAggregatesInput[]
  OR?: Prisma.RideScalarWhereWithAggregatesInput[]
  NOT?: Prisma.RideScalarWhereWithAggregatesInput | Prisma.RideScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Ride"> | string
  driverId?: Prisma.StringWithAggregatesFilter<"Ride"> | string
  origin?: Prisma.StringWithAggregatesFilter<"Ride"> | string
  destination?: Prisma.StringWithAggregatesFilter<"Ride"> | string
  departureTime?: Prisma.DateTimeWithAggregatesFilter<"Ride"> | Date | string
  seats?: Prisma.IntWithAggregatesFilter<"Ride"> | number
  fare?: Prisma.FloatWithAggregatesFilter<"Ride"> | number
  status?: Prisma.EnumRideStatusWithAggregatesFilter<"Ride"> | $Enums.RideStatus
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Ride"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Ride"> | Date | string
  originLatitude?: Prisma.FloatNullableWithAggregatesFilter<"Ride"> | number | null
  originLongitude?: Prisma.FloatNullableWithAggregatesFilter<"Ride"> | number | null
  destLatitude?: Prisma.FloatNullableWithAggregatesFilter<"Ride"> | number | null
  destLongitude?: Prisma.FloatNullableWithAggregatesFilter<"Ride"> | number | null
  proposedFare?: Prisma.FloatNullableWithAggregatesFilter<"Ride"> | number | null
  acceptedFare?: Prisma.FloatNullableWithAggregatesFilter<"Ride"> | number | null
  bargainHistory?: Prisma.JsonNullableWithAggregatesFilter<"Ride">
}

export type RideCreateInput = {
  id?: string
  origin: string
  destination: string
  departureTime: Date | string
  seats: number
  fare: number
  status?: $Enums.RideStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  originLatitude?: number | null
  originLongitude?: number | null
  destLatitude?: number | null
  destLongitude?: number | null
  proposedFare?: number | null
  acceptedFare?: number | null
  bargainHistory?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  driver: Prisma.UserCreateNestedOneWithoutRidesAsDriverInput
  requests?: Prisma.RideRequestCreateNestedManyWithoutRideInput
  offers?: Prisma.OfferCreateNestedManyWithoutRideInput
}

export type RideUncheckedCreateInput = {
  id?: string
  driverId: string
  origin: string
  destination: string
  departureTime: Date | string
  seats: number
  fare: number
  status?: $Enums.RideStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  originLatitude?: number | null
  originLongitude?: number | null
  destLatitude?: number | null
  destLongitude?: number | null
  proposedFare?: number | null
  acceptedFare?: number | null
  bargainHistory?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  requests?: Prisma.RideRequestUncheckedCreateNestedManyWithoutRideInput
  offers?: Prisma.OfferUncheckedCreateNestedManyWithoutRideInput
}

export type RideUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  origin?: Prisma.StringFieldUpdateOperationsInput | string
  destination?: Prisma.StringFieldUpdateOperationsInput | string
  departureTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  seats?: Prisma.IntFieldUpdateOperationsInput | number
  fare?: Prisma.FloatFieldUpdateOperationsInput | number
  status?: Prisma.EnumRideStatusFieldUpdateOperationsInput | $Enums.RideStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  originLatitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  originLongitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  destLatitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  destLongitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  proposedFare?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  acceptedFare?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  bargainHistory?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  driver?: Prisma.UserUpdateOneRequiredWithoutRidesAsDriverNestedInput
  requests?: Prisma.RideRequestUpdateManyWithoutRideNestedInput
  offers?: Prisma.OfferUpdateManyWithoutRideNestedInput
}

export type RideUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  driverId?: Prisma.StringFieldUpdateOperationsInput | string
  origin?: Prisma.StringFieldUpdateOperationsInput | string
  destination?: Prisma.StringFieldUpdateOperationsInput | string
  departureTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  seats?: Prisma.IntFieldUpdateOperationsInput | number
  fare?: Prisma.FloatFieldUpdateOperationsInput | number
  status?: Prisma.EnumRideStatusFieldUpdateOperationsInput | $Enums.RideStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  originLatitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  originLongitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  destLatitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  destLongitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  proposedFare?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  acceptedFare?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  bargainHistory?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  requests?: Prisma.RideRequestUncheckedUpdateManyWithoutRideNestedInput
  offers?: Prisma.OfferUncheckedUpdateManyWithoutRideNestedInput
}

export type RideCreateManyInput = {
  id?: string
  driverId: string
  origin: string
  destination: string
  departureTime: Date | string
  seats: number
  fare: number
  status?: $Enums.RideStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  originLatitude?: number | null
  originLongitude?: number | null
  destLatitude?: number | null
  destLongitude?: number | null
  proposedFare?: number | null
  acceptedFare?: number | null
  bargainHistory?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type RideUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  origin?: Prisma.StringFieldUpdateOperationsInput | string
  destination?: Prisma.StringFieldUpdateOperationsInput | string
  departureTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  seats?: Prisma.IntFieldUpdateOperationsInput | number
  fare?: Prisma.FloatFieldUpdateOperationsInput | number
  status?: Prisma.EnumRideStatusFieldUpdateOperationsInput | $Enums.RideStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  originLatitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  originLongitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  destLatitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  destLongitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  proposedFare?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  acceptedFare?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  bargainHistory?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type RideUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  driverId?: Prisma.StringFieldUpdateOperationsInput | string
  origin?: Prisma.StringFieldUpdateOperationsInput | string
  destination?: Prisma.StringFieldUpdateOperationsInput | string
  departureTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  seats?: Prisma.IntFieldUpdateOperationsInput | number
  fare?: Prisma.FloatFieldUpdateOperationsInput | number
  status?: Prisma.EnumRideStatusFieldUpdateOperationsInput | $Enums.RideStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  originLatitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  originLongitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  destLatitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  destLongitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  proposedFare?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  acceptedFare?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  bargainHistory?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type RideListRelationFilter = {
  every?: Prisma.RideWhereInput
  some?: Prisma.RideWhereInput
  none?: Prisma.RideWhereInput
}

export type RideOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type RideCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  driverId?: Prisma.SortOrder
  origin?: Prisma.SortOrder
  destination?: Prisma.SortOrder
  departureTime?: Prisma.SortOrder
  seats?: Prisma.SortOrder
  fare?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  originLatitude?: Prisma.SortOrder
  originLongitude?: Prisma.SortOrder
  destLatitude?: Prisma.SortOrder
  destLongitude?: Prisma.SortOrder
  proposedFare?: Prisma.SortOrder
  acceptedFare?: Prisma.SortOrder
  bargainHistory?: Prisma.SortOrder
}

export type RideAvgOrderByAggregateInput = {
  seats?: Prisma.SortOrder
  fare?: Prisma.SortOrder
  originLatitude?: Prisma.SortOrder
  originLongitude?: Prisma.SortOrder
  destLatitude?: Prisma.SortOrder
  destLongitude?: Prisma.SortOrder
  proposedFare?: Prisma.SortOrder
  acceptedFare?: Prisma.SortOrder
}

export type RideMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  driverId?: Prisma.SortOrder
  origin?: Prisma.SortOrder
  destination?: Prisma.SortOrder
  departureTime?: Prisma.SortOrder
  seats?: Prisma.SortOrder
  fare?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  originLatitude?: Prisma.SortOrder
  originLongitude?: Prisma.SortOrder
  destLatitude?: Prisma.SortOrder
  destLongitude?: Prisma.SortOrder
  proposedFare?: Prisma.SortOrder
  acceptedFare?: Prisma.SortOrder
}

export type RideMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  driverId?: Prisma.SortOrder
  origin?: Prisma.SortOrder
  destination?: Prisma.SortOrder
  departureTime?: Prisma.SortOrder
  seats?: Prisma.SortOrder
  fare?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  originLatitude?: Prisma.SortOrder
  originLongitude?: Prisma.SortOrder
  destLatitude?: Prisma.SortOrder
  destLongitude?: Prisma.SortOrder
  proposedFare?: Prisma.SortOrder
  acceptedFare?: Prisma.SortOrder
}

export type RideSumOrderByAggregateInput = {
  seats?: Prisma.SortOrder
  fare?: Prisma.SortOrder
  originLatitude?: Prisma.SortOrder
  originLongitude?: Prisma.SortOrder
  destLatitude?: Prisma.SortOrder
  destLongitude?: Prisma.SortOrder
  proposedFare?: Prisma.SortOrder
  acceptedFare?: Prisma.SortOrder
}

export type RideNullableScalarRelationFilter = {
  is?: Prisma.RideWhereInput | null
  isNot?: Prisma.RideWhereInput | null
}

export type RideScalarRelationFilter = {
  is?: Prisma.RideWhereInput
  isNot?: Prisma.RideWhereInput
}

export type RideCreateNestedManyWithoutDriverInput = {
  create?: Prisma.XOR<Prisma.RideCreateWithoutDriverInput, Prisma.RideUncheckedCreateWithoutDriverInput> | Prisma.RideCreateWithoutDriverInput[] | Prisma.RideUncheckedCreateWithoutDriverInput[]
  connectOrCreate?: Prisma.RideCreateOrConnectWithoutDriverInput | Prisma.RideCreateOrConnectWithoutDriverInput[]
  createMany?: Prisma.RideCreateManyDriverInputEnvelope
  connect?: Prisma.RideWhereUniqueInput | Prisma.RideWhereUniqueInput[]
}

export type RideUncheckedCreateNestedManyWithoutDriverInput = {
  create?: Prisma.XOR<Prisma.RideCreateWithoutDriverInput, Prisma.RideUncheckedCreateWithoutDriverInput> | Prisma.RideCreateWithoutDriverInput[] | Prisma.RideUncheckedCreateWithoutDriverInput[]
  connectOrCreate?: Prisma.RideCreateOrConnectWithoutDriverInput | Prisma.RideCreateOrConnectWithoutDriverInput[]
  createMany?: Prisma.RideCreateManyDriverInputEnvelope
  connect?: Prisma.RideWhereUniqueInput | Prisma.RideWhereUniqueInput[]
}

export type RideUpdateManyWithoutDriverNestedInput = {
  create?: Prisma.XOR<Prisma.RideCreateWithoutDriverInput, Prisma.RideUncheckedCreateWithoutDriverInput> | Prisma.RideCreateWithoutDriverInput[] | Prisma.RideUncheckedCreateWithoutDriverInput[]
  connectOrCreate?: Prisma.RideCreateOrConnectWithoutDriverInput | Prisma.RideCreateOrConnectWithoutDriverInput[]
  upsert?: Prisma.RideUpsertWithWhereUniqueWithoutDriverInput | Prisma.RideUpsertWithWhereUniqueWithoutDriverInput[]
  createMany?: Prisma.RideCreateManyDriverInputEnvelope
  set?: Prisma.RideWhereUniqueInput | Prisma.RideWhereUniqueInput[]
  disconnect?: Prisma.RideWhereUniqueInput | Prisma.RideWhereUniqueInput[]
  delete?: Prisma.RideWhereUniqueInput | Prisma.RideWhereUniqueInput[]
  connect?: Prisma.RideWhereUniqueInput | Prisma.RideWhereUniqueInput[]
  update?: Prisma.RideUpdateWithWhereUniqueWithoutDriverInput | Prisma.RideUpdateWithWhereUniqueWithoutDriverInput[]
  updateMany?: Prisma.RideUpdateManyWithWhereWithoutDriverInput | Prisma.RideUpdateManyWithWhereWithoutDriverInput[]
  deleteMany?: Prisma.RideScalarWhereInput | Prisma.RideScalarWhereInput[]
}

export type RideUncheckedUpdateManyWithoutDriverNestedInput = {
  create?: Prisma.XOR<Prisma.RideCreateWithoutDriverInput, Prisma.RideUncheckedCreateWithoutDriverInput> | Prisma.RideCreateWithoutDriverInput[] | Prisma.RideUncheckedCreateWithoutDriverInput[]
  connectOrCreate?: Prisma.RideCreateOrConnectWithoutDriverInput | Prisma.RideCreateOrConnectWithoutDriverInput[]
  upsert?: Prisma.RideUpsertWithWhereUniqueWithoutDriverInput | Prisma.RideUpsertWithWhereUniqueWithoutDriverInput[]
  createMany?: Prisma.RideCreateManyDriverInputEnvelope
  set?: Prisma.RideWhereUniqueInput | Prisma.RideWhereUniqueInput[]
  disconnect?: Prisma.RideWhereUniqueInput | Prisma.RideWhereUniqueInput[]
  delete?: Prisma.RideWhereUniqueInput | Prisma.RideWhereUniqueInput[]
  connect?: Prisma.RideWhereUniqueInput | Prisma.RideWhereUniqueInput[]
  update?: Prisma.RideUpdateWithWhereUniqueWithoutDriverInput | Prisma.RideUpdateWithWhereUniqueWithoutDriverInput[]
  updateMany?: Prisma.RideUpdateManyWithWhereWithoutDriverInput | Prisma.RideUpdateManyWithWhereWithoutDriverInput[]
  deleteMany?: Prisma.RideScalarWhereInput | Prisma.RideScalarWhereInput[]
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type EnumRideStatusFieldUpdateOperationsInput = {
  set?: $Enums.RideStatus
}

export type RideCreateNestedOneWithoutRequestsInput = {
  create?: Prisma.XOR<Prisma.RideCreateWithoutRequestsInput, Prisma.RideUncheckedCreateWithoutRequestsInput>
  connectOrCreate?: Prisma.RideCreateOrConnectWithoutRequestsInput
  connect?: Prisma.RideWhereUniqueInput
}

export type RideUpdateOneWithoutRequestsNestedInput = {
  create?: Prisma.XOR<Prisma.RideCreateWithoutRequestsInput, Prisma.RideUncheckedCreateWithoutRequestsInput>
  connectOrCreate?: Prisma.RideCreateOrConnectWithoutRequestsInput
  upsert?: Prisma.RideUpsertWithoutRequestsInput
  disconnect?: Prisma.RideWhereInput | boolean
  delete?: Prisma.RideWhereInput | boolean
  connect?: Prisma.RideWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.RideUpdateToOneWithWhereWithoutRequestsInput, Prisma.RideUpdateWithoutRequestsInput>, Prisma.RideUncheckedUpdateWithoutRequestsInput>
}

export type RideCreateNestedOneWithoutOffersInput = {
  create?: Prisma.XOR<Prisma.RideCreateWithoutOffersInput, Prisma.RideUncheckedCreateWithoutOffersInput>
  connectOrCreate?: Prisma.RideCreateOrConnectWithoutOffersInput
  connect?: Prisma.RideWhereUniqueInput
}

export type RideUpdateOneRequiredWithoutOffersNestedInput = {
  create?: Prisma.XOR<Prisma.RideCreateWithoutOffersInput, Prisma.RideUncheckedCreateWithoutOffersInput>
  connectOrCreate?: Prisma.RideCreateOrConnectWithoutOffersInput
  upsert?: Prisma.RideUpsertWithoutOffersInput
  connect?: Prisma.RideWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.RideUpdateToOneWithWhereWithoutOffersInput, Prisma.RideUpdateWithoutOffersInput>, Prisma.RideUncheckedUpdateWithoutOffersInput>
}

export type RideCreateWithoutDriverInput = {
  id?: string
  origin: string
  destination: string
  departureTime: Date | string
  seats: number
  fare: number
  status?: $Enums.RideStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  originLatitude?: number | null
  originLongitude?: number | null
  destLatitude?: number | null
  destLongitude?: number | null
  proposedFare?: number | null
  acceptedFare?: number | null
  bargainHistory?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  requests?: Prisma.RideRequestCreateNestedManyWithoutRideInput
  offers?: Prisma.OfferCreateNestedManyWithoutRideInput
}

export type RideUncheckedCreateWithoutDriverInput = {
  id?: string
  origin: string
  destination: string
  departureTime: Date | string
  seats: number
  fare: number
  status?: $Enums.RideStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  originLatitude?: number | null
  originLongitude?: number | null
  destLatitude?: number | null
  destLongitude?: number | null
  proposedFare?: number | null
  acceptedFare?: number | null
  bargainHistory?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  requests?: Prisma.RideRequestUncheckedCreateNestedManyWithoutRideInput
  offers?: Prisma.OfferUncheckedCreateNestedManyWithoutRideInput
}

export type RideCreateOrConnectWithoutDriverInput = {
  where: Prisma.RideWhereUniqueInput
  create: Prisma.XOR<Prisma.RideCreateWithoutDriverInput, Prisma.RideUncheckedCreateWithoutDriverInput>
}

export type RideCreateManyDriverInputEnvelope = {
  data: Prisma.RideCreateManyDriverInput | Prisma.RideCreateManyDriverInput[]
  skipDuplicates?: boolean
}

export type RideUpsertWithWhereUniqueWithoutDriverInput = {
  where: Prisma.RideWhereUniqueInput
  update: Prisma.XOR<Prisma.RideUpdateWithoutDriverInput, Prisma.RideUncheckedUpdateWithoutDriverInput>
  create: Prisma.XOR<Prisma.RideCreateWithoutDriverInput, Prisma.RideUncheckedCreateWithoutDriverInput>
}

export type RideUpdateWithWhereUniqueWithoutDriverInput = {
  where: Prisma.RideWhereUniqueInput
  data: Prisma.XOR<Prisma.RideUpdateWithoutDriverInput, Prisma.RideUncheckedUpdateWithoutDriverInput>
}

export type RideUpdateManyWithWhereWithoutDriverInput = {
  where: Prisma.RideScalarWhereInput
  data: Prisma.XOR<Prisma.RideUpdateManyMutationInput, Prisma.RideUncheckedUpdateManyWithoutDriverInput>
}

export type RideScalarWhereInput = {
  AND?: Prisma.RideScalarWhereInput | Prisma.RideScalarWhereInput[]
  OR?: Prisma.RideScalarWhereInput[]
  NOT?: Prisma.RideScalarWhereInput | Prisma.RideScalarWhereInput[]
  id?: Prisma.StringFilter<"Ride"> | string
  driverId?: Prisma.StringFilter<"Ride"> | string
  origin?: Prisma.StringFilter<"Ride"> | string
  destination?: Prisma.StringFilter<"Ride"> | string
  departureTime?: Prisma.DateTimeFilter<"Ride"> | Date | string
  seats?: Prisma.IntFilter<"Ride"> | number
  fare?: Prisma.FloatFilter<"Ride"> | number
  status?: Prisma.EnumRideStatusFilter<"Ride"> | $Enums.RideStatus
  createdAt?: Prisma.DateTimeFilter<"Ride"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Ride"> | Date | string
  originLatitude?: Prisma.FloatNullableFilter<"Ride"> | number | null
  originLongitude?: Prisma.FloatNullableFilter<"Ride"> | number | null
  destLatitude?: Prisma.FloatNullableFilter<"Ride"> | number | null
  destLongitude?: Prisma.FloatNullableFilter<"Ride"> | number | null
  proposedFare?: Prisma.FloatNullableFilter<"Ride"> | number | null
  acceptedFare?: Prisma.FloatNullableFilter<"Ride"> | number | null
  bargainHistory?: Prisma.JsonNullableFilter<"Ride">
}

export type RideCreateWithoutRequestsInput = {
  id?: string
  origin: string
  destination: string
  departureTime: Date | string
  seats: number
  fare: number
  status?: $Enums.RideStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  originLatitude?: number | null
  originLongitude?: number | null
  destLatitude?: number | null
  destLongitude?: number | null
  proposedFare?: number | null
  acceptedFare?: number | null
  bargainHistory?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  driver: Prisma.UserCreateNestedOneWithoutRidesAsDriverInput
  offers?: Prisma.OfferCreateNestedManyWithoutRideInput
}

export type RideUncheckedCreateWithoutRequestsInput = {
  id?: string
  driverId: string
  origin: string
  destination: string
  departureTime: Date | string
  seats: number
  fare: number
  status?: $Enums.RideStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  originLatitude?: number | null
  originLongitude?: number | null
  destLatitude?: number | null
  destLongitude?: number | null
  proposedFare?: number | null
  acceptedFare?: number | null
  bargainHistory?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  offers?: Prisma.OfferUncheckedCreateNestedManyWithoutRideInput
}

export type RideCreateOrConnectWithoutRequestsInput = {
  where: Prisma.RideWhereUniqueInput
  create: Prisma.XOR<Prisma.RideCreateWithoutRequestsInput, Prisma.RideUncheckedCreateWithoutRequestsInput>
}

export type RideUpsertWithoutRequestsInput = {
  update: Prisma.XOR<Prisma.RideUpdateWithoutRequestsInput, Prisma.RideUncheckedUpdateWithoutRequestsInput>
  create: Prisma.XOR<Prisma.RideCreateWithoutRequestsInput, Prisma.RideUncheckedCreateWithoutRequestsInput>
  where?: Prisma.RideWhereInput
}

export type RideUpdateToOneWithWhereWithoutRequestsInput = {
  where?: Prisma.RideWhereInput
  data: Prisma.XOR<Prisma.RideUpdateWithoutRequestsInput, Prisma.RideUncheckedUpdateWithoutRequestsInput>
}

export type RideUpdateWithoutRequestsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  origin?: Prisma.StringFieldUpdateOperationsInput | string
  destination?: Prisma.StringFieldUpdateOperationsInput | string
  departureTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  seats?: Prisma.IntFieldUpdateOperationsInput | number
  fare?: Prisma.FloatFieldUpdateOperationsInput | number
  status?: Prisma.EnumRideStatusFieldUpdateOperationsInput | $Enums.RideStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  originLatitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  originLongitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  destLatitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  destLongitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  proposedFare?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  acceptedFare?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  bargainHistory?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  driver?: Prisma.UserUpdateOneRequiredWithoutRidesAsDriverNestedInput
  offers?: Prisma.OfferUpdateManyWithoutRideNestedInput
}

export type RideUncheckedUpdateWithoutRequestsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  driverId?: Prisma.StringFieldUpdateOperationsInput | string
  origin?: Prisma.StringFieldUpdateOperationsInput | string
  destination?: Prisma.StringFieldUpdateOperationsInput | string
  departureTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  seats?: Prisma.IntFieldUpdateOperationsInput | number
  fare?: Prisma.FloatFieldUpdateOperationsInput | number
  status?: Prisma.EnumRideStatusFieldUpdateOperationsInput | $Enums.RideStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  originLatitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  originLongitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  destLatitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  destLongitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  proposedFare?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  acceptedFare?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  bargainHistory?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  offers?: Prisma.OfferUncheckedUpdateManyWithoutRideNestedInput
}

export type RideCreateWithoutOffersInput = {
  id?: string
  origin: string
  destination: string
  departureTime: Date | string
  seats: number
  fare: number
  status?: $Enums.RideStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  originLatitude?: number | null
  originLongitude?: number | null
  destLatitude?: number | null
  destLongitude?: number | null
  proposedFare?: number | null
  acceptedFare?: number | null
  bargainHistory?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  driver: Prisma.UserCreateNestedOneWithoutRidesAsDriverInput
  requests?: Prisma.RideRequestCreateNestedManyWithoutRideInput
}

export type RideUncheckedCreateWithoutOffersInput = {
  id?: string
  driverId: string
  origin: string
  destination: string
  departureTime: Date | string
  seats: number
  fare: number
  status?: $Enums.RideStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  originLatitude?: number | null
  originLongitude?: number | null
  destLatitude?: number | null
  destLongitude?: number | null
  proposedFare?: number | null
  acceptedFare?: number | null
  bargainHistory?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  requests?: Prisma.RideRequestUncheckedCreateNestedManyWithoutRideInput
}

export type RideCreateOrConnectWithoutOffersInput = {
  where: Prisma.RideWhereUniqueInput
  create: Prisma.XOR<Prisma.RideCreateWithoutOffersInput, Prisma.RideUncheckedCreateWithoutOffersInput>
}

export type RideUpsertWithoutOffersInput = {
  update: Prisma.XOR<Prisma.RideUpdateWithoutOffersInput, Prisma.RideUncheckedUpdateWithoutOffersInput>
  create: Prisma.XOR<Prisma.RideCreateWithoutOffersInput, Prisma.RideUncheckedCreateWithoutOffersInput>
  where?: Prisma.RideWhereInput
}

export type RideUpdateToOneWithWhereWithoutOffersInput = {
  where?: Prisma.RideWhereInput
  data: Prisma.XOR<Prisma.RideUpdateWithoutOffersInput, Prisma.RideUncheckedUpdateWithoutOffersInput>
}

export type RideUpdateWithoutOffersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  origin?: Prisma.StringFieldUpdateOperationsInput | string
  destination?: Prisma.StringFieldUpdateOperationsInput | string
  departureTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  seats?: Prisma.IntFieldUpdateOperationsInput | number
  fare?: Prisma.FloatFieldUpdateOperationsInput | number
  status?: Prisma.EnumRideStatusFieldUpdateOperationsInput | $Enums.RideStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  originLatitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  originLongitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  destLatitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  destLongitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  proposedFare?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  acceptedFare?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  bargainHistory?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  driver?: Prisma.UserUpdateOneRequiredWithoutRidesAsDriverNestedInput
  requests?: Prisma.RideRequestUpdateManyWithoutRideNestedInput
}

export type RideUncheckedUpdateWithoutOffersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  driverId?: Prisma.StringFieldUpdateOperationsInput | string
  origin?: Prisma.StringFieldUpdateOperationsInput | string
  destination?: Prisma.StringFieldUpdateOperationsInput | string
  departureTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  seats?: Prisma.IntFieldUpdateOperationsInput | number
  fare?: Prisma.FloatFieldUpdateOperationsInput | number
  status?: Prisma.EnumRideStatusFieldUpdateOperationsInput | $Enums.RideStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  originLatitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  originLongitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  destLatitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  destLongitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  proposedFare?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  acceptedFare?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  bargainHistory?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  requests?: Prisma.RideRequestUncheckedUpdateManyWithoutRideNestedInput
}

export type RideCreateManyDriverInput = {
  id?: string
  origin: string
  destination: string
  departureTime: Date | string
  seats: number
  fare: number
  status?: $Enums.RideStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  originLatitude?: number | null
  originLongitude?: number | null
  destLatitude?: number | null
  destLongitude?: number | null
  proposedFare?: number | null
  acceptedFare?: number | null
  bargainHistory?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}

export type RideUpdateWithoutDriverInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  origin?: Prisma.StringFieldUpdateOperationsInput | string
  destination?: Prisma.StringFieldUpdateOperationsInput | string
  departureTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  seats?: Prisma.IntFieldUpdateOperationsInput | number
  fare?: Prisma.FloatFieldUpdateOperationsInput | number
  status?: Prisma.EnumRideStatusFieldUpdateOperationsInput | $Enums.RideStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  originLatitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  originLongitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  destLatitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  destLongitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  proposedFare?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  acceptedFare?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  bargainHistory?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  requests?: Prisma.RideRequestUpdateManyWithoutRideNestedInput
  offers?: Prisma.OfferUpdateManyWithoutRideNestedInput
}

export type RideUncheckedUpdateWithoutDriverInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  origin?: Prisma.StringFieldUpdateOperationsInput | string
  destination?: Prisma.StringFieldUpdateOperationsInput | string
  departureTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  seats?: Prisma.IntFieldUpdateOperationsInput | number
  fare?: Prisma.FloatFieldUpdateOperationsInput | number
  status?: Prisma.EnumRideStatusFieldUpdateOperationsInput | $Enums.RideStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  originLatitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  originLongitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  destLatitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  destLongitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  proposedFare?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  acceptedFare?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  bargainHistory?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  requests?: Prisma.RideRequestUncheckedUpdateManyWithoutRideNestedInput
  offers?: Prisma.OfferUncheckedUpdateManyWithoutRideNestedInput
}

export type RideUncheckedUpdateManyWithoutDriverInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  origin?: Prisma.StringFieldUpdateOperationsInput | string
  destination?: Prisma.StringFieldUpdateOperationsInput | string
  departureTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  seats?: Prisma.IntFieldUpdateOperationsInput | number
  fare?: Prisma.FloatFieldUpdateOperationsInput | number
  status?: Prisma.EnumRideStatusFieldUpdateOperationsInput | $Enums.RideStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  originLatitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  originLongitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  destLatitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  destLongitude?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  proposedFare?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  acceptedFare?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  bargainHistory?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
}


/**
 * Count Type RideCountOutputType
 */

export type RideCountOutputType = {
  requests: number
  offers: number
}

export type RideCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  requests?: boolean | RideCountOutputTypeCountRequestsArgs
  offers?: boolean | RideCountOutputTypeCountOffersArgs
}

/**
 * RideCountOutputType without action
 */
export type RideCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RideCountOutputType
   */
  select?: Prisma.RideCountOutputTypeSelect<ExtArgs> | null
}

/**
 * RideCountOutputType without action
 */
export type RideCountOutputTypeCountRequestsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.RideRequestWhereInput
}

/**
 * RideCountOutputType without action
 */
export type RideCountOutputTypeCountOffersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.OfferWhereInput
}


export type RideSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  driverId?: boolean
  origin?: boolean
  destination?: boolean
  departureTime?: boolean
  seats?: boolean
  fare?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  originLatitude?: boolean
  originLongitude?: boolean
  destLatitude?: boolean
  destLongitude?: boolean
  proposedFare?: boolean
  acceptedFare?: boolean
  bargainHistory?: boolean
  driver?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  requests?: boolean | Prisma.Ride$requestsArgs<ExtArgs>
  offers?: boolean | Prisma.Ride$offersArgs<ExtArgs>
  _count?: boolean | Prisma.RideCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["ride"]>

export type RideSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  driverId?: boolean
  origin?: boolean
  destination?: boolean
  departureTime?: boolean
  seats?: boolean
  fare?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  originLatitude?: boolean
  originLongitude?: boolean
  destLatitude?: boolean
  destLongitude?: boolean
  proposedFare?: boolean
  acceptedFare?: boolean
  bargainHistory?: boolean
  driver?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["ride"]>

export type RideSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  driverId?: boolean
  origin?: boolean
  destination?: boolean
  departureTime?: boolean
  seats?: boolean
  fare?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  originLatitude?: boolean
  originLongitude?: boolean
  destLatitude?: boolean
  destLongitude?: boolean
  proposedFare?: boolean
  acceptedFare?: boolean
  bargainHistory?: boolean
  driver?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["ride"]>

export type RideSelectScalar = {
  id?: boolean
  driverId?: boolean
  origin?: boolean
  destination?: boolean
  departureTime?: boolean
  seats?: boolean
  fare?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  originLatitude?: boolean
  originLongitude?: boolean
  destLatitude?: boolean
  destLongitude?: boolean
  proposedFare?: boolean
  acceptedFare?: boolean
  bargainHistory?: boolean
}

export type RideOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "driverId" | "origin" | "destination" | "departureTime" | "seats" | "fare" | "status" | "createdAt" | "updatedAt" | "originLatitude" | "originLongitude" | "destLatitude" | "destLongitude" | "proposedFare" | "acceptedFare" | "bargainHistory", ExtArgs["result"]["ride"]>
export type RideInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  driver?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  requests?: boolean | Prisma.Ride$requestsArgs<ExtArgs>
  offers?: boolean | Prisma.Ride$offersArgs<ExtArgs>
  _count?: boolean | Prisma.RideCountOutputTypeDefaultArgs<ExtArgs>
}
export type RideIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  driver?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type RideIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  driver?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $RidePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Ride"
  objects: {
    driver: Prisma.$UserPayload<ExtArgs>
    requests: Prisma.$RideRequestPayload<ExtArgs>[]
    offers: Prisma.$OfferPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    driverId: string
    origin: string
    destination: string
    departureTime: Date
    seats: number
    fare: number
    status: $Enums.RideStatus
    createdAt: Date
    updatedAt: Date
    originLatitude: number | null
    originLongitude: number | null
    destLatitude: number | null
    destLongitude: number | null
    proposedFare: number | null
    acceptedFare: number | null
    bargainHistory: runtime.JsonValue | null
  }, ExtArgs["result"]["ride"]>
  composites: {}
}

export type RideGetPayload<S extends boolean | null | undefined | RideDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$RidePayload, S>

export type RideCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<RideFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: RideCountAggregateInputType | true
  }

export interface RideDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Ride'], meta: { name: 'Ride' } }
  /**
   * Find zero or one Ride that matches the filter.
   * @param {RideFindUniqueArgs} args - Arguments to find a Ride
   * @example
   * // Get one Ride
   * const ride = await prisma.ride.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends RideFindUniqueArgs>(args: Prisma.SelectSubset<T, RideFindUniqueArgs<ExtArgs>>): Prisma.Prisma__RideClient<runtime.Types.Result.GetResult<Prisma.$RidePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Ride that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {RideFindUniqueOrThrowArgs} args - Arguments to find a Ride
   * @example
   * // Get one Ride
   * const ride = await prisma.ride.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends RideFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, RideFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__RideClient<runtime.Types.Result.GetResult<Prisma.$RidePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Ride that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RideFindFirstArgs} args - Arguments to find a Ride
   * @example
   * // Get one Ride
   * const ride = await prisma.ride.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends RideFindFirstArgs>(args?: Prisma.SelectSubset<T, RideFindFirstArgs<ExtArgs>>): Prisma.Prisma__RideClient<runtime.Types.Result.GetResult<Prisma.$RidePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Ride that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RideFindFirstOrThrowArgs} args - Arguments to find a Ride
   * @example
   * // Get one Ride
   * const ride = await prisma.ride.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends RideFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, RideFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__RideClient<runtime.Types.Result.GetResult<Prisma.$RidePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Rides that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RideFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Rides
   * const rides = await prisma.ride.findMany()
   * 
   * // Get first 10 Rides
   * const rides = await prisma.ride.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const rideWithIdOnly = await prisma.ride.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends RideFindManyArgs>(args?: Prisma.SelectSubset<T, RideFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RidePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Ride.
   * @param {RideCreateArgs} args - Arguments to create a Ride.
   * @example
   * // Create one Ride
   * const Ride = await prisma.ride.create({
   *   data: {
   *     // ... data to create a Ride
   *   }
   * })
   * 
   */
  create<T extends RideCreateArgs>(args: Prisma.SelectSubset<T, RideCreateArgs<ExtArgs>>): Prisma.Prisma__RideClient<runtime.Types.Result.GetResult<Prisma.$RidePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Rides.
   * @param {RideCreateManyArgs} args - Arguments to create many Rides.
   * @example
   * // Create many Rides
   * const ride = await prisma.ride.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends RideCreateManyArgs>(args?: Prisma.SelectSubset<T, RideCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Rides and returns the data saved in the database.
   * @param {RideCreateManyAndReturnArgs} args - Arguments to create many Rides.
   * @example
   * // Create many Rides
   * const ride = await prisma.ride.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Rides and only return the `id`
   * const rideWithIdOnly = await prisma.ride.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends RideCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, RideCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RidePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Ride.
   * @param {RideDeleteArgs} args - Arguments to delete one Ride.
   * @example
   * // Delete one Ride
   * const Ride = await prisma.ride.delete({
   *   where: {
   *     // ... filter to delete one Ride
   *   }
   * })
   * 
   */
  delete<T extends RideDeleteArgs>(args: Prisma.SelectSubset<T, RideDeleteArgs<ExtArgs>>): Prisma.Prisma__RideClient<runtime.Types.Result.GetResult<Prisma.$RidePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Ride.
   * @param {RideUpdateArgs} args - Arguments to update one Ride.
   * @example
   * // Update one Ride
   * const ride = await prisma.ride.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends RideUpdateArgs>(args: Prisma.SelectSubset<T, RideUpdateArgs<ExtArgs>>): Prisma.Prisma__RideClient<runtime.Types.Result.GetResult<Prisma.$RidePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Rides.
   * @param {RideDeleteManyArgs} args - Arguments to filter Rides to delete.
   * @example
   * // Delete a few Rides
   * const { count } = await prisma.ride.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends RideDeleteManyArgs>(args?: Prisma.SelectSubset<T, RideDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Rides.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RideUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Rides
   * const ride = await prisma.ride.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends RideUpdateManyArgs>(args: Prisma.SelectSubset<T, RideUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Rides and returns the data updated in the database.
   * @param {RideUpdateManyAndReturnArgs} args - Arguments to update many Rides.
   * @example
   * // Update many Rides
   * const ride = await prisma.ride.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Rides and only return the `id`
   * const rideWithIdOnly = await prisma.ride.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends RideUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, RideUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RidePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Ride.
   * @param {RideUpsertArgs} args - Arguments to update or create a Ride.
   * @example
   * // Update or create a Ride
   * const ride = await prisma.ride.upsert({
   *   create: {
   *     // ... data to create a Ride
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Ride we want to update
   *   }
   * })
   */
  upsert<T extends RideUpsertArgs>(args: Prisma.SelectSubset<T, RideUpsertArgs<ExtArgs>>): Prisma.Prisma__RideClient<runtime.Types.Result.GetResult<Prisma.$RidePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Rides.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RideCountArgs} args - Arguments to filter Rides to count.
   * @example
   * // Count the number of Rides
   * const count = await prisma.ride.count({
   *   where: {
   *     // ... the filter for the Rides we want to count
   *   }
   * })
  **/
  count<T extends RideCountArgs>(
    args?: Prisma.Subset<T, RideCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], RideCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Ride.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RideAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends RideAggregateArgs>(args: Prisma.Subset<T, RideAggregateArgs>): Prisma.PrismaPromise<GetRideAggregateType<T>>

  /**
   * Group by Ride.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RideGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends RideGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: RideGroupByArgs['orderBy'] }
      : { orderBy?: RideGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, RideGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRideGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Ride model
 */
readonly fields: RideFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Ride.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__RideClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  driver<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  requests<T extends Prisma.Ride$requestsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Ride$requestsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RideRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  offers<T extends Prisma.Ride$offersArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Ride$offersArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OfferPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Ride model
 */
export interface RideFieldRefs {
  readonly id: Prisma.FieldRef<"Ride", 'String'>
  readonly driverId: Prisma.FieldRef<"Ride", 'String'>
  readonly origin: Prisma.FieldRef<"Ride", 'String'>
  readonly destination: Prisma.FieldRef<"Ride", 'String'>
  readonly departureTime: Prisma.FieldRef<"Ride", 'DateTime'>
  readonly seats: Prisma.FieldRef<"Ride", 'Int'>
  readonly fare: Prisma.FieldRef<"Ride", 'Float'>
  readonly status: Prisma.FieldRef<"Ride", 'RideStatus'>
  readonly createdAt: Prisma.FieldRef<"Ride", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Ride", 'DateTime'>
  readonly originLatitude: Prisma.FieldRef<"Ride", 'Float'>
  readonly originLongitude: Prisma.FieldRef<"Ride", 'Float'>
  readonly destLatitude: Prisma.FieldRef<"Ride", 'Float'>
  readonly destLongitude: Prisma.FieldRef<"Ride", 'Float'>
  readonly proposedFare: Prisma.FieldRef<"Ride", 'Float'>
  readonly acceptedFare: Prisma.FieldRef<"Ride", 'Float'>
  readonly bargainHistory: Prisma.FieldRef<"Ride", 'Json'>
}
    

// Custom InputTypes
/**
 * Ride findUnique
 */
export type RideFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ride
   */
  select?: Prisma.RideSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Ride
   */
  omit?: Prisma.RideOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RideInclude<ExtArgs> | null
  /**
   * Filter, which Ride to fetch.
   */
  where: Prisma.RideWhereUniqueInput
}

/**
 * Ride findUniqueOrThrow
 */
export type RideFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ride
   */
  select?: Prisma.RideSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Ride
   */
  omit?: Prisma.RideOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RideInclude<ExtArgs> | null
  /**
   * Filter, which Ride to fetch.
   */
  where: Prisma.RideWhereUniqueInput
}

/**
 * Ride findFirst
 */
export type RideFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ride
   */
  select?: Prisma.RideSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Ride
   */
  omit?: Prisma.RideOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RideInclude<ExtArgs> | null
  /**
   * Filter, which Ride to fetch.
   */
  where?: Prisma.RideWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Rides to fetch.
   */
  orderBy?: Prisma.RideOrderByWithRelationInput | Prisma.RideOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Rides.
   */
  cursor?: Prisma.RideWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Rides from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Rides.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Rides.
   */
  distinct?: Prisma.RideScalarFieldEnum | Prisma.RideScalarFieldEnum[]
}

/**
 * Ride findFirstOrThrow
 */
export type RideFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ride
   */
  select?: Prisma.RideSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Ride
   */
  omit?: Prisma.RideOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RideInclude<ExtArgs> | null
  /**
   * Filter, which Ride to fetch.
   */
  where?: Prisma.RideWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Rides to fetch.
   */
  orderBy?: Prisma.RideOrderByWithRelationInput | Prisma.RideOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Rides.
   */
  cursor?: Prisma.RideWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Rides from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Rides.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Rides.
   */
  distinct?: Prisma.RideScalarFieldEnum | Prisma.RideScalarFieldEnum[]
}

/**
 * Ride findMany
 */
export type RideFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ride
   */
  select?: Prisma.RideSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Ride
   */
  omit?: Prisma.RideOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RideInclude<ExtArgs> | null
  /**
   * Filter, which Rides to fetch.
   */
  where?: Prisma.RideWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Rides to fetch.
   */
  orderBy?: Prisma.RideOrderByWithRelationInput | Prisma.RideOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Rides.
   */
  cursor?: Prisma.RideWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Rides from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Rides.
   */
  skip?: number
  distinct?: Prisma.RideScalarFieldEnum | Prisma.RideScalarFieldEnum[]
}

/**
 * Ride create
 */
export type RideCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ride
   */
  select?: Prisma.RideSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Ride
   */
  omit?: Prisma.RideOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RideInclude<ExtArgs> | null
  /**
   * The data needed to create a Ride.
   */
  data: Prisma.XOR<Prisma.RideCreateInput, Prisma.RideUncheckedCreateInput>
}

/**
 * Ride createMany
 */
export type RideCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Rides.
   */
  data: Prisma.RideCreateManyInput | Prisma.RideCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Ride createManyAndReturn
 */
export type RideCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ride
   */
  select?: Prisma.RideSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Ride
   */
  omit?: Prisma.RideOmit<ExtArgs> | null
  /**
   * The data used to create many Rides.
   */
  data: Prisma.RideCreateManyInput | Prisma.RideCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RideIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Ride update
 */
export type RideUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ride
   */
  select?: Prisma.RideSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Ride
   */
  omit?: Prisma.RideOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RideInclude<ExtArgs> | null
  /**
   * The data needed to update a Ride.
   */
  data: Prisma.XOR<Prisma.RideUpdateInput, Prisma.RideUncheckedUpdateInput>
  /**
   * Choose, which Ride to update.
   */
  where: Prisma.RideWhereUniqueInput
}

/**
 * Ride updateMany
 */
export type RideUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Rides.
   */
  data: Prisma.XOR<Prisma.RideUpdateManyMutationInput, Prisma.RideUncheckedUpdateManyInput>
  /**
   * Filter which Rides to update
   */
  where?: Prisma.RideWhereInput
  /**
   * Limit how many Rides to update.
   */
  limit?: number
}

/**
 * Ride updateManyAndReturn
 */
export type RideUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ride
   */
  select?: Prisma.RideSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Ride
   */
  omit?: Prisma.RideOmit<ExtArgs> | null
  /**
   * The data used to update Rides.
   */
  data: Prisma.XOR<Prisma.RideUpdateManyMutationInput, Prisma.RideUncheckedUpdateManyInput>
  /**
   * Filter which Rides to update
   */
  where?: Prisma.RideWhereInput
  /**
   * Limit how many Rides to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RideIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Ride upsert
 */
export type RideUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ride
   */
  select?: Prisma.RideSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Ride
   */
  omit?: Prisma.RideOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RideInclude<ExtArgs> | null
  /**
   * The filter to search for the Ride to update in case it exists.
   */
  where: Prisma.RideWhereUniqueInput
  /**
   * In case the Ride found by the `where` argument doesn't exist, create a new Ride with this data.
   */
  create: Prisma.XOR<Prisma.RideCreateInput, Prisma.RideUncheckedCreateInput>
  /**
   * In case the Ride was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.RideUpdateInput, Prisma.RideUncheckedUpdateInput>
}

/**
 * Ride delete
 */
export type RideDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ride
   */
  select?: Prisma.RideSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Ride
   */
  omit?: Prisma.RideOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RideInclude<ExtArgs> | null
  /**
   * Filter which Ride to delete.
   */
  where: Prisma.RideWhereUniqueInput
}

/**
 * Ride deleteMany
 */
export type RideDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Rides to delete
   */
  where?: Prisma.RideWhereInput
  /**
   * Limit how many Rides to delete.
   */
  limit?: number
}

/**
 * Ride.requests
 */
export type Ride$requestsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RideRequest
   */
  select?: Prisma.RideRequestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RideRequest
   */
  omit?: Prisma.RideRequestOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RideRequestInclude<ExtArgs> | null
  where?: Prisma.RideRequestWhereInput
  orderBy?: Prisma.RideRequestOrderByWithRelationInput | Prisma.RideRequestOrderByWithRelationInput[]
  cursor?: Prisma.RideRequestWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.RideRequestScalarFieldEnum | Prisma.RideRequestScalarFieldEnum[]
}

/**
 * Ride.offers
 */
export type Ride$offersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Offer
   */
  select?: Prisma.OfferSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Offer
   */
  omit?: Prisma.OfferOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OfferInclude<ExtArgs> | null
  where?: Prisma.OfferWhereInput
  orderBy?: Prisma.OfferOrderByWithRelationInput | Prisma.OfferOrderByWithRelationInput[]
  cursor?: Prisma.OfferWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.OfferScalarFieldEnum | Prisma.OfferScalarFieldEnum[]
}

/**
 * Ride without action
 */
export type RideDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ride
   */
  select?: Prisma.RideSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Ride
   */
  omit?: Prisma.RideOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RideInclude<ExtArgs> | null
}

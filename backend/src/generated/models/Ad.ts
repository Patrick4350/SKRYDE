
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Ad` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Ad
 * 
 */
export type AdModel = runtime.Types.Result.DefaultSelection<Prisma.$AdPayload>

export type AggregateAd = {
  _count: AdCountAggregateOutputType | null
  _min: AdMinAggregateOutputType | null
  _max: AdMaxAggregateOutputType | null
}

export type AdMinAggregateOutputType = {
  id: string | null
  title: string | null
  image: string | null
  link: string | null
  active: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type AdMaxAggregateOutputType = {
  id: string | null
  title: string | null
  image: string | null
  link: string | null
  active: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type AdCountAggregateOutputType = {
  id: number
  title: number
  image: number
  link: number
  active: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type AdMinAggregateInputType = {
  id?: true
  title?: true
  image?: true
  link?: true
  active?: true
  createdAt?: true
  updatedAt?: true
}

export type AdMaxAggregateInputType = {
  id?: true
  title?: true
  image?: true
  link?: true
  active?: true
  createdAt?: true
  updatedAt?: true
}

export type AdCountAggregateInputType = {
  id?: true
  title?: true
  image?: true
  link?: true
  active?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type AdAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Ad to aggregate.
   */
  where?: Prisma.AdWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Ads to fetch.
   */
  orderBy?: Prisma.AdOrderByWithRelationInput | Prisma.AdOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AdWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Ads from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Ads.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Ads
  **/
  _count?: true | AdCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AdMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AdMaxAggregateInputType
}

export type GetAdAggregateType<T extends AdAggregateArgs> = {
      [P in keyof T & keyof AggregateAd]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAd[P]>
    : Prisma.GetScalarType<T[P], AggregateAd[P]>
}




export type AdGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AdWhereInput
  orderBy?: Prisma.AdOrderByWithAggregationInput | Prisma.AdOrderByWithAggregationInput[]
  by: Prisma.AdScalarFieldEnum[] | Prisma.AdScalarFieldEnum
  having?: Prisma.AdScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AdCountAggregateInputType | true
  _min?: AdMinAggregateInputType
  _max?: AdMaxAggregateInputType
}

export type AdGroupByOutputType = {
  id: string
  title: string
  image: string | null
  link: string | null
  active: boolean
  createdAt: Date
  updatedAt: Date
  _count: AdCountAggregateOutputType | null
  _min: AdMinAggregateOutputType | null
  _max: AdMaxAggregateOutputType | null
}

type GetAdGroupByPayload<T extends AdGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AdGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AdGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AdGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AdGroupByOutputType[P]>
      }
    >
  >



export type AdWhereInput = {
  AND?: Prisma.AdWhereInput | Prisma.AdWhereInput[]
  OR?: Prisma.AdWhereInput[]
  NOT?: Prisma.AdWhereInput | Prisma.AdWhereInput[]
  id?: Prisma.StringFilter<"Ad"> | string
  title?: Prisma.StringFilter<"Ad"> | string
  image?: Prisma.StringNullableFilter<"Ad"> | string | null
  link?: Prisma.StringNullableFilter<"Ad"> | string | null
  active?: Prisma.BoolFilter<"Ad"> | boolean
  createdAt?: Prisma.DateTimeFilter<"Ad"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Ad"> | Date | string
}

export type AdOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  image?: Prisma.SortOrderInput | Prisma.SortOrder
  link?: Prisma.SortOrderInput | Prisma.SortOrder
  active?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AdWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.AdWhereInput | Prisma.AdWhereInput[]
  OR?: Prisma.AdWhereInput[]
  NOT?: Prisma.AdWhereInput | Prisma.AdWhereInput[]
  title?: Prisma.StringFilter<"Ad"> | string
  image?: Prisma.StringNullableFilter<"Ad"> | string | null
  link?: Prisma.StringNullableFilter<"Ad"> | string | null
  active?: Prisma.BoolFilter<"Ad"> | boolean
  createdAt?: Prisma.DateTimeFilter<"Ad"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Ad"> | Date | string
}, "id">

export type AdOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  image?: Prisma.SortOrderInput | Prisma.SortOrder
  link?: Prisma.SortOrderInput | Prisma.SortOrder
  active?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.AdCountOrderByAggregateInput
  _max?: Prisma.AdMaxOrderByAggregateInput
  _min?: Prisma.AdMinOrderByAggregateInput
}

export type AdScalarWhereWithAggregatesInput = {
  AND?: Prisma.AdScalarWhereWithAggregatesInput | Prisma.AdScalarWhereWithAggregatesInput[]
  OR?: Prisma.AdScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AdScalarWhereWithAggregatesInput | Prisma.AdScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Ad"> | string
  title?: Prisma.StringWithAggregatesFilter<"Ad"> | string
  image?: Prisma.StringNullableWithAggregatesFilter<"Ad"> | string | null
  link?: Prisma.StringNullableWithAggregatesFilter<"Ad"> | string | null
  active?: Prisma.BoolWithAggregatesFilter<"Ad"> | boolean
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Ad"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Ad"> | Date | string
}

export type AdCreateInput = {
  id?: string
  title: string
  image?: string | null
  link?: string | null
  active?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AdUncheckedCreateInput = {
  id?: string
  title: string
  image?: string | null
  link?: string | null
  active?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AdUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  link?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  active?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AdUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  link?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  active?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AdCreateManyInput = {
  id?: string
  title: string
  image?: string | null
  link?: string | null
  active?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AdUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  link?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  active?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AdUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  link?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  active?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AdCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  image?: Prisma.SortOrder
  link?: Prisma.SortOrder
  active?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AdMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  image?: Prisma.SortOrder
  link?: Prisma.SortOrder
  active?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AdMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  image?: Prisma.SortOrder
  link?: Prisma.SortOrder
  active?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}



export type AdSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  image?: boolean
  link?: boolean
  active?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["ad"]>

export type AdSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  image?: boolean
  link?: boolean
  active?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["ad"]>

export type AdSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  image?: boolean
  link?: boolean
  active?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["ad"]>

export type AdSelectScalar = {
  id?: boolean
  title?: boolean
  image?: boolean
  link?: boolean
  active?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type AdOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "title" | "image" | "link" | "active" | "createdAt" | "updatedAt", ExtArgs["result"]["ad"]>

export type $AdPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Ad"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    title: string
    image: string | null
    link: string | null
    active: boolean
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["ad"]>
  composites: {}
}

export type AdGetPayload<S extends boolean | null | undefined | AdDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AdPayload, S>

export type AdCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AdFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AdCountAggregateInputType | true
  }

export interface AdDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Ad'], meta: { name: 'Ad' } }
  /**
   * Find zero or one Ad that matches the filter.
   * @param {AdFindUniqueArgs} args - Arguments to find a Ad
   * @example
   * // Get one Ad
   * const ad = await prisma.ad.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AdFindUniqueArgs>(args: Prisma.SelectSubset<T, AdFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AdClient<runtime.Types.Result.GetResult<Prisma.$AdPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Ad that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AdFindUniqueOrThrowArgs} args - Arguments to find a Ad
   * @example
   * // Get one Ad
   * const ad = await prisma.ad.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AdFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AdFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AdClient<runtime.Types.Result.GetResult<Prisma.$AdPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Ad that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdFindFirstArgs} args - Arguments to find a Ad
   * @example
   * // Get one Ad
   * const ad = await prisma.ad.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AdFindFirstArgs>(args?: Prisma.SelectSubset<T, AdFindFirstArgs<ExtArgs>>): Prisma.Prisma__AdClient<runtime.Types.Result.GetResult<Prisma.$AdPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Ad that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdFindFirstOrThrowArgs} args - Arguments to find a Ad
   * @example
   * // Get one Ad
   * const ad = await prisma.ad.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AdFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AdFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AdClient<runtime.Types.Result.GetResult<Prisma.$AdPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Ads that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Ads
   * const ads = await prisma.ad.findMany()
   * 
   * // Get first 10 Ads
   * const ads = await prisma.ad.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const adWithIdOnly = await prisma.ad.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends AdFindManyArgs>(args?: Prisma.SelectSubset<T, AdFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AdPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Ad.
   * @param {AdCreateArgs} args - Arguments to create a Ad.
   * @example
   * // Create one Ad
   * const Ad = await prisma.ad.create({
   *   data: {
   *     // ... data to create a Ad
   *   }
   * })
   * 
   */
  create<T extends AdCreateArgs>(args: Prisma.SelectSubset<T, AdCreateArgs<ExtArgs>>): Prisma.Prisma__AdClient<runtime.Types.Result.GetResult<Prisma.$AdPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Ads.
   * @param {AdCreateManyArgs} args - Arguments to create many Ads.
   * @example
   * // Create many Ads
   * const ad = await prisma.ad.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AdCreateManyArgs>(args?: Prisma.SelectSubset<T, AdCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Ads and returns the data saved in the database.
   * @param {AdCreateManyAndReturnArgs} args - Arguments to create many Ads.
   * @example
   * // Create many Ads
   * const ad = await prisma.ad.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Ads and only return the `id`
   * const adWithIdOnly = await prisma.ad.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AdCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AdCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AdPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Ad.
   * @param {AdDeleteArgs} args - Arguments to delete one Ad.
   * @example
   * // Delete one Ad
   * const Ad = await prisma.ad.delete({
   *   where: {
   *     // ... filter to delete one Ad
   *   }
   * })
   * 
   */
  delete<T extends AdDeleteArgs>(args: Prisma.SelectSubset<T, AdDeleteArgs<ExtArgs>>): Prisma.Prisma__AdClient<runtime.Types.Result.GetResult<Prisma.$AdPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Ad.
   * @param {AdUpdateArgs} args - Arguments to update one Ad.
   * @example
   * // Update one Ad
   * const ad = await prisma.ad.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AdUpdateArgs>(args: Prisma.SelectSubset<T, AdUpdateArgs<ExtArgs>>): Prisma.Prisma__AdClient<runtime.Types.Result.GetResult<Prisma.$AdPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Ads.
   * @param {AdDeleteManyArgs} args - Arguments to filter Ads to delete.
   * @example
   * // Delete a few Ads
   * const { count } = await prisma.ad.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AdDeleteManyArgs>(args?: Prisma.SelectSubset<T, AdDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Ads.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Ads
   * const ad = await prisma.ad.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AdUpdateManyArgs>(args: Prisma.SelectSubset<T, AdUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Ads and returns the data updated in the database.
   * @param {AdUpdateManyAndReturnArgs} args - Arguments to update many Ads.
   * @example
   * // Update many Ads
   * const ad = await prisma.ad.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Ads and only return the `id`
   * const adWithIdOnly = await prisma.ad.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AdUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AdUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AdPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Ad.
   * @param {AdUpsertArgs} args - Arguments to update or create a Ad.
   * @example
   * // Update or create a Ad
   * const ad = await prisma.ad.upsert({
   *   create: {
   *     // ... data to create a Ad
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Ad we want to update
   *   }
   * })
   */
  upsert<T extends AdUpsertArgs>(args: Prisma.SelectSubset<T, AdUpsertArgs<ExtArgs>>): Prisma.Prisma__AdClient<runtime.Types.Result.GetResult<Prisma.$AdPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Ads.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdCountArgs} args - Arguments to filter Ads to count.
   * @example
   * // Count the number of Ads
   * const count = await prisma.ad.count({
   *   where: {
   *     // ... the filter for the Ads we want to count
   *   }
   * })
  **/
  count<T extends AdCountArgs>(
    args?: Prisma.Subset<T, AdCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AdCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Ad.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AdAggregateArgs>(args: Prisma.Subset<T, AdAggregateArgs>): Prisma.PrismaPromise<GetAdAggregateType<T>>

  /**
   * Group by Ad.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AdGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AdGroupByArgs['orderBy'] }
      : { orderBy?: AdGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AdGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Ad model
 */
readonly fields: AdFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Ad.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AdClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Ad model
 */
export interface AdFieldRefs {
  readonly id: Prisma.FieldRef<"Ad", 'String'>
  readonly title: Prisma.FieldRef<"Ad", 'String'>
  readonly image: Prisma.FieldRef<"Ad", 'String'>
  readonly link: Prisma.FieldRef<"Ad", 'String'>
  readonly active: Prisma.FieldRef<"Ad", 'Boolean'>
  readonly createdAt: Prisma.FieldRef<"Ad", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Ad", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Ad findUnique
 */
export type AdFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ad
   */
  select?: Prisma.AdSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Ad
   */
  omit?: Prisma.AdOmit<ExtArgs> | null
  /**
   * Filter, which Ad to fetch.
   */
  where: Prisma.AdWhereUniqueInput
}

/**
 * Ad findUniqueOrThrow
 */
export type AdFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ad
   */
  select?: Prisma.AdSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Ad
   */
  omit?: Prisma.AdOmit<ExtArgs> | null
  /**
   * Filter, which Ad to fetch.
   */
  where: Prisma.AdWhereUniqueInput
}

/**
 * Ad findFirst
 */
export type AdFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ad
   */
  select?: Prisma.AdSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Ad
   */
  omit?: Prisma.AdOmit<ExtArgs> | null
  /**
   * Filter, which Ad to fetch.
   */
  where?: Prisma.AdWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Ads to fetch.
   */
  orderBy?: Prisma.AdOrderByWithRelationInput | Prisma.AdOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Ads.
   */
  cursor?: Prisma.AdWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Ads from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Ads.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Ads.
   */
  distinct?: Prisma.AdScalarFieldEnum | Prisma.AdScalarFieldEnum[]
}

/**
 * Ad findFirstOrThrow
 */
export type AdFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ad
   */
  select?: Prisma.AdSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Ad
   */
  omit?: Prisma.AdOmit<ExtArgs> | null
  /**
   * Filter, which Ad to fetch.
   */
  where?: Prisma.AdWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Ads to fetch.
   */
  orderBy?: Prisma.AdOrderByWithRelationInput | Prisma.AdOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Ads.
   */
  cursor?: Prisma.AdWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Ads from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Ads.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Ads.
   */
  distinct?: Prisma.AdScalarFieldEnum | Prisma.AdScalarFieldEnum[]
}

/**
 * Ad findMany
 */
export type AdFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ad
   */
  select?: Prisma.AdSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Ad
   */
  omit?: Prisma.AdOmit<ExtArgs> | null
  /**
   * Filter, which Ads to fetch.
   */
  where?: Prisma.AdWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Ads to fetch.
   */
  orderBy?: Prisma.AdOrderByWithRelationInput | Prisma.AdOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Ads.
   */
  cursor?: Prisma.AdWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Ads from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Ads.
   */
  skip?: number
  distinct?: Prisma.AdScalarFieldEnum | Prisma.AdScalarFieldEnum[]
}

/**
 * Ad create
 */
export type AdCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ad
   */
  select?: Prisma.AdSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Ad
   */
  omit?: Prisma.AdOmit<ExtArgs> | null
  /**
   * The data needed to create a Ad.
   */
  data: Prisma.XOR<Prisma.AdCreateInput, Prisma.AdUncheckedCreateInput>
}

/**
 * Ad createMany
 */
export type AdCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Ads.
   */
  data: Prisma.AdCreateManyInput | Prisma.AdCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Ad createManyAndReturn
 */
export type AdCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ad
   */
  select?: Prisma.AdSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Ad
   */
  omit?: Prisma.AdOmit<ExtArgs> | null
  /**
   * The data used to create many Ads.
   */
  data: Prisma.AdCreateManyInput | Prisma.AdCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Ad update
 */
export type AdUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ad
   */
  select?: Prisma.AdSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Ad
   */
  omit?: Prisma.AdOmit<ExtArgs> | null
  /**
   * The data needed to update a Ad.
   */
  data: Prisma.XOR<Prisma.AdUpdateInput, Prisma.AdUncheckedUpdateInput>
  /**
   * Choose, which Ad to update.
   */
  where: Prisma.AdWhereUniqueInput
}

/**
 * Ad updateMany
 */
export type AdUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Ads.
   */
  data: Prisma.XOR<Prisma.AdUpdateManyMutationInput, Prisma.AdUncheckedUpdateManyInput>
  /**
   * Filter which Ads to update
   */
  where?: Prisma.AdWhereInput
  /**
   * Limit how many Ads to update.
   */
  limit?: number
}

/**
 * Ad updateManyAndReturn
 */
export type AdUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ad
   */
  select?: Prisma.AdSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Ad
   */
  omit?: Prisma.AdOmit<ExtArgs> | null
  /**
   * The data used to update Ads.
   */
  data: Prisma.XOR<Prisma.AdUpdateManyMutationInput, Prisma.AdUncheckedUpdateManyInput>
  /**
   * Filter which Ads to update
   */
  where?: Prisma.AdWhereInput
  /**
   * Limit how many Ads to update.
   */
  limit?: number
}

/**
 * Ad upsert
 */
export type AdUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ad
   */
  select?: Prisma.AdSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Ad
   */
  omit?: Prisma.AdOmit<ExtArgs> | null
  /**
   * The filter to search for the Ad to update in case it exists.
   */
  where: Prisma.AdWhereUniqueInput
  /**
   * In case the Ad found by the `where` argument doesn't exist, create a new Ad with this data.
   */
  create: Prisma.XOR<Prisma.AdCreateInput, Prisma.AdUncheckedCreateInput>
  /**
   * In case the Ad was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AdUpdateInput, Prisma.AdUncheckedUpdateInput>
}

/**
 * Ad delete
 */
export type AdDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ad
   */
  select?: Prisma.AdSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Ad
   */
  omit?: Prisma.AdOmit<ExtArgs> | null
  /**
   * Filter which Ad to delete.
   */
  where: Prisma.AdWhereUniqueInput
}

/**
 * Ad deleteMany
 */
export type AdDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Ads to delete
   */
  where?: Prisma.AdWhereInput
  /**
   * Limit how many Ads to delete.
   */
  limit?: number
}

/**
 * Ad without action
 */
export type AdDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ad
   */
  select?: Prisma.AdSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Ad
   */
  omit?: Prisma.AdOmit<ExtArgs> | null
}

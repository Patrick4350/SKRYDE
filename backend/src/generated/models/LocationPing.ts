
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `LocationPing` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model LocationPing
 * 
 */
export type LocationPingModel = runtime.Types.Result.DefaultSelection<Prisma.$LocationPingPayload>

export type AggregateLocationPing = {
  _count: LocationPingCountAggregateOutputType | null
  _avg: LocationPingAvgAggregateOutputType | null
  _sum: LocationPingSumAggregateOutputType | null
  _min: LocationPingMinAggregateOutputType | null
  _max: LocationPingMaxAggregateOutputType | null
}

export type LocationPingAvgAggregateOutputType = {
  latitude: number | null
  longitude: number | null
}

export type LocationPingSumAggregateOutputType = {
  latitude: number | null
  longitude: number | null
}

export type LocationPingMinAggregateOutputType = {
  id: string | null
  userId: string | null
  latitude: number | null
  longitude: number | null
  timestamp: Date | null
}

export type LocationPingMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  latitude: number | null
  longitude: number | null
  timestamp: Date | null
}

export type LocationPingCountAggregateOutputType = {
  id: number
  userId: number
  latitude: number
  longitude: number
  timestamp: number
  _all: number
}


export type LocationPingAvgAggregateInputType = {
  latitude?: true
  longitude?: true
}

export type LocationPingSumAggregateInputType = {
  latitude?: true
  longitude?: true
}

export type LocationPingMinAggregateInputType = {
  id?: true
  userId?: true
  latitude?: true
  longitude?: true
  timestamp?: true
}

export type LocationPingMaxAggregateInputType = {
  id?: true
  userId?: true
  latitude?: true
  longitude?: true
  timestamp?: true
}

export type LocationPingCountAggregateInputType = {
  id?: true
  userId?: true
  latitude?: true
  longitude?: true
  timestamp?: true
  _all?: true
}

export type LocationPingAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which LocationPing to aggregate.
   */
  where?: Prisma.LocationPingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of LocationPings to fetch.
   */
  orderBy?: Prisma.LocationPingOrderByWithRelationInput | Prisma.LocationPingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.LocationPingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` LocationPings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` LocationPings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned LocationPings
  **/
  _count?: true | LocationPingCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: LocationPingAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: LocationPingSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: LocationPingMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: LocationPingMaxAggregateInputType
}

export type GetLocationPingAggregateType<T extends LocationPingAggregateArgs> = {
      [P in keyof T & keyof AggregateLocationPing]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateLocationPing[P]>
    : Prisma.GetScalarType<T[P], AggregateLocationPing[P]>
}




export type LocationPingGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.LocationPingWhereInput
  orderBy?: Prisma.LocationPingOrderByWithAggregationInput | Prisma.LocationPingOrderByWithAggregationInput[]
  by: Prisma.LocationPingScalarFieldEnum[] | Prisma.LocationPingScalarFieldEnum
  having?: Prisma.LocationPingScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: LocationPingCountAggregateInputType | true
  _avg?: LocationPingAvgAggregateInputType
  _sum?: LocationPingSumAggregateInputType
  _min?: LocationPingMinAggregateInputType
  _max?: LocationPingMaxAggregateInputType
}

export type LocationPingGroupByOutputType = {
  id: string
  userId: string
  latitude: number
  longitude: number
  timestamp: Date
  _count: LocationPingCountAggregateOutputType | null
  _avg: LocationPingAvgAggregateOutputType | null
  _sum: LocationPingSumAggregateOutputType | null
  _min: LocationPingMinAggregateOutputType | null
  _max: LocationPingMaxAggregateOutputType | null
}

type GetLocationPingGroupByPayload<T extends LocationPingGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<LocationPingGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof LocationPingGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], LocationPingGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], LocationPingGroupByOutputType[P]>
      }
    >
  >



export type LocationPingWhereInput = {
  AND?: Prisma.LocationPingWhereInput | Prisma.LocationPingWhereInput[]
  OR?: Prisma.LocationPingWhereInput[]
  NOT?: Prisma.LocationPingWhereInput | Prisma.LocationPingWhereInput[]
  id?: Prisma.StringFilter<"LocationPing"> | string
  userId?: Prisma.StringFilter<"LocationPing"> | string
  latitude?: Prisma.FloatFilter<"LocationPing"> | number
  longitude?: Prisma.FloatFilter<"LocationPing"> | number
  timestamp?: Prisma.DateTimeFilter<"LocationPing"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type LocationPingOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  latitude?: Prisma.SortOrder
  longitude?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
}

export type LocationPingWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.LocationPingWhereInput | Prisma.LocationPingWhereInput[]
  OR?: Prisma.LocationPingWhereInput[]
  NOT?: Prisma.LocationPingWhereInput | Prisma.LocationPingWhereInput[]
  userId?: Prisma.StringFilter<"LocationPing"> | string
  latitude?: Prisma.FloatFilter<"LocationPing"> | number
  longitude?: Prisma.FloatFilter<"LocationPing"> | number
  timestamp?: Prisma.DateTimeFilter<"LocationPing"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id">

export type LocationPingOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  latitude?: Prisma.SortOrder
  longitude?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  _count?: Prisma.LocationPingCountOrderByAggregateInput
  _avg?: Prisma.LocationPingAvgOrderByAggregateInput
  _max?: Prisma.LocationPingMaxOrderByAggregateInput
  _min?: Prisma.LocationPingMinOrderByAggregateInput
  _sum?: Prisma.LocationPingSumOrderByAggregateInput
}

export type LocationPingScalarWhereWithAggregatesInput = {
  AND?: Prisma.LocationPingScalarWhereWithAggregatesInput | Prisma.LocationPingScalarWhereWithAggregatesInput[]
  OR?: Prisma.LocationPingScalarWhereWithAggregatesInput[]
  NOT?: Prisma.LocationPingScalarWhereWithAggregatesInput | Prisma.LocationPingScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"LocationPing"> | string
  userId?: Prisma.StringWithAggregatesFilter<"LocationPing"> | string
  latitude?: Prisma.FloatWithAggregatesFilter<"LocationPing"> | number
  longitude?: Prisma.FloatWithAggregatesFilter<"LocationPing"> | number
  timestamp?: Prisma.DateTimeWithAggregatesFilter<"LocationPing"> | Date | string
}

export type LocationPingCreateInput = {
  id?: string
  latitude: number
  longitude: number
  timestamp?: Date | string
  user: Prisma.UserCreateNestedOneWithoutLocationPingsInput
}

export type LocationPingUncheckedCreateInput = {
  id?: string
  userId: string
  latitude: number
  longitude: number
  timestamp?: Date | string
}

export type LocationPingUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  latitude?: Prisma.FloatFieldUpdateOperationsInput | number
  longitude?: Prisma.FloatFieldUpdateOperationsInput | number
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutLocationPingsNestedInput
}

export type LocationPingUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  latitude?: Prisma.FloatFieldUpdateOperationsInput | number
  longitude?: Prisma.FloatFieldUpdateOperationsInput | number
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type LocationPingCreateManyInput = {
  id?: string
  userId: string
  latitude: number
  longitude: number
  timestamp?: Date | string
}

export type LocationPingUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  latitude?: Prisma.FloatFieldUpdateOperationsInput | number
  longitude?: Prisma.FloatFieldUpdateOperationsInput | number
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type LocationPingUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  latitude?: Prisma.FloatFieldUpdateOperationsInput | number
  longitude?: Prisma.FloatFieldUpdateOperationsInput | number
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type LocationPingListRelationFilter = {
  every?: Prisma.LocationPingWhereInput
  some?: Prisma.LocationPingWhereInput
  none?: Prisma.LocationPingWhereInput
}

export type LocationPingOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type LocationPingCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  latitude?: Prisma.SortOrder
  longitude?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
}

export type LocationPingAvgOrderByAggregateInput = {
  latitude?: Prisma.SortOrder
  longitude?: Prisma.SortOrder
}

export type LocationPingMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  latitude?: Prisma.SortOrder
  longitude?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
}

export type LocationPingMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  latitude?: Prisma.SortOrder
  longitude?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
}

export type LocationPingSumOrderByAggregateInput = {
  latitude?: Prisma.SortOrder
  longitude?: Prisma.SortOrder
}

export type LocationPingCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.LocationPingCreateWithoutUserInput, Prisma.LocationPingUncheckedCreateWithoutUserInput> | Prisma.LocationPingCreateWithoutUserInput[] | Prisma.LocationPingUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.LocationPingCreateOrConnectWithoutUserInput | Prisma.LocationPingCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.LocationPingCreateManyUserInputEnvelope
  connect?: Prisma.LocationPingWhereUniqueInput | Prisma.LocationPingWhereUniqueInput[]
}

export type LocationPingUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.LocationPingCreateWithoutUserInput, Prisma.LocationPingUncheckedCreateWithoutUserInput> | Prisma.LocationPingCreateWithoutUserInput[] | Prisma.LocationPingUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.LocationPingCreateOrConnectWithoutUserInput | Prisma.LocationPingCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.LocationPingCreateManyUserInputEnvelope
  connect?: Prisma.LocationPingWhereUniqueInput | Prisma.LocationPingWhereUniqueInput[]
}

export type LocationPingUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.LocationPingCreateWithoutUserInput, Prisma.LocationPingUncheckedCreateWithoutUserInput> | Prisma.LocationPingCreateWithoutUserInput[] | Prisma.LocationPingUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.LocationPingCreateOrConnectWithoutUserInput | Prisma.LocationPingCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.LocationPingUpsertWithWhereUniqueWithoutUserInput | Prisma.LocationPingUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.LocationPingCreateManyUserInputEnvelope
  set?: Prisma.LocationPingWhereUniqueInput | Prisma.LocationPingWhereUniqueInput[]
  disconnect?: Prisma.LocationPingWhereUniqueInput | Prisma.LocationPingWhereUniqueInput[]
  delete?: Prisma.LocationPingWhereUniqueInput | Prisma.LocationPingWhereUniqueInput[]
  connect?: Prisma.LocationPingWhereUniqueInput | Prisma.LocationPingWhereUniqueInput[]
  update?: Prisma.LocationPingUpdateWithWhereUniqueWithoutUserInput | Prisma.LocationPingUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.LocationPingUpdateManyWithWhereWithoutUserInput | Prisma.LocationPingUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.LocationPingScalarWhereInput | Prisma.LocationPingScalarWhereInput[]
}

export type LocationPingUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.LocationPingCreateWithoutUserInput, Prisma.LocationPingUncheckedCreateWithoutUserInput> | Prisma.LocationPingCreateWithoutUserInput[] | Prisma.LocationPingUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.LocationPingCreateOrConnectWithoutUserInput | Prisma.LocationPingCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.LocationPingUpsertWithWhereUniqueWithoutUserInput | Prisma.LocationPingUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.LocationPingCreateManyUserInputEnvelope
  set?: Prisma.LocationPingWhereUniqueInput | Prisma.LocationPingWhereUniqueInput[]
  disconnect?: Prisma.LocationPingWhereUniqueInput | Prisma.LocationPingWhereUniqueInput[]
  delete?: Prisma.LocationPingWhereUniqueInput | Prisma.LocationPingWhereUniqueInput[]
  connect?: Prisma.LocationPingWhereUniqueInput | Prisma.LocationPingWhereUniqueInput[]
  update?: Prisma.LocationPingUpdateWithWhereUniqueWithoutUserInput | Prisma.LocationPingUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.LocationPingUpdateManyWithWhereWithoutUserInput | Prisma.LocationPingUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.LocationPingScalarWhereInput | Prisma.LocationPingScalarWhereInput[]
}

export type LocationPingCreateWithoutUserInput = {
  id?: string
  latitude: number
  longitude: number
  timestamp?: Date | string
}

export type LocationPingUncheckedCreateWithoutUserInput = {
  id?: string
  latitude: number
  longitude: number
  timestamp?: Date | string
}

export type LocationPingCreateOrConnectWithoutUserInput = {
  where: Prisma.LocationPingWhereUniqueInput
  create: Prisma.XOR<Prisma.LocationPingCreateWithoutUserInput, Prisma.LocationPingUncheckedCreateWithoutUserInput>
}

export type LocationPingCreateManyUserInputEnvelope = {
  data: Prisma.LocationPingCreateManyUserInput | Prisma.LocationPingCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type LocationPingUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.LocationPingWhereUniqueInput
  update: Prisma.XOR<Prisma.LocationPingUpdateWithoutUserInput, Prisma.LocationPingUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.LocationPingCreateWithoutUserInput, Prisma.LocationPingUncheckedCreateWithoutUserInput>
}

export type LocationPingUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.LocationPingWhereUniqueInput
  data: Prisma.XOR<Prisma.LocationPingUpdateWithoutUserInput, Prisma.LocationPingUncheckedUpdateWithoutUserInput>
}

export type LocationPingUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.LocationPingScalarWhereInput
  data: Prisma.XOR<Prisma.LocationPingUpdateManyMutationInput, Prisma.LocationPingUncheckedUpdateManyWithoutUserInput>
}

export type LocationPingScalarWhereInput = {
  AND?: Prisma.LocationPingScalarWhereInput | Prisma.LocationPingScalarWhereInput[]
  OR?: Prisma.LocationPingScalarWhereInput[]
  NOT?: Prisma.LocationPingScalarWhereInput | Prisma.LocationPingScalarWhereInput[]
  id?: Prisma.StringFilter<"LocationPing"> | string
  userId?: Prisma.StringFilter<"LocationPing"> | string
  latitude?: Prisma.FloatFilter<"LocationPing"> | number
  longitude?: Prisma.FloatFilter<"LocationPing"> | number
  timestamp?: Prisma.DateTimeFilter<"LocationPing"> | Date | string
}

export type LocationPingCreateManyUserInput = {
  id?: string
  latitude: number
  longitude: number
  timestamp?: Date | string
}

export type LocationPingUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  latitude?: Prisma.FloatFieldUpdateOperationsInput | number
  longitude?: Prisma.FloatFieldUpdateOperationsInput | number
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type LocationPingUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  latitude?: Prisma.FloatFieldUpdateOperationsInput | number
  longitude?: Prisma.FloatFieldUpdateOperationsInput | number
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type LocationPingUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  latitude?: Prisma.FloatFieldUpdateOperationsInput | number
  longitude?: Prisma.FloatFieldUpdateOperationsInput | number
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type LocationPingSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  latitude?: boolean
  longitude?: boolean
  timestamp?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["locationPing"]>

export type LocationPingSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  latitude?: boolean
  longitude?: boolean
  timestamp?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["locationPing"]>

export type LocationPingSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  latitude?: boolean
  longitude?: boolean
  timestamp?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["locationPing"]>

export type LocationPingSelectScalar = {
  id?: boolean
  userId?: boolean
  latitude?: boolean
  longitude?: boolean
  timestamp?: boolean
}

export type LocationPingOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "latitude" | "longitude" | "timestamp", ExtArgs["result"]["locationPing"]>
export type LocationPingInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type LocationPingIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type LocationPingIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $LocationPingPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "LocationPing"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    latitude: number
    longitude: number
    timestamp: Date
  }, ExtArgs["result"]["locationPing"]>
  composites: {}
}

export type LocationPingGetPayload<S extends boolean | null | undefined | LocationPingDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$LocationPingPayload, S>

export type LocationPingCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<LocationPingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: LocationPingCountAggregateInputType | true
  }

export interface LocationPingDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LocationPing'], meta: { name: 'LocationPing' } }
  /**
   * Find zero or one LocationPing that matches the filter.
   * @param {LocationPingFindUniqueArgs} args - Arguments to find a LocationPing
   * @example
   * // Get one LocationPing
   * const locationPing = await prisma.locationPing.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends LocationPingFindUniqueArgs>(args: Prisma.SelectSubset<T, LocationPingFindUniqueArgs<ExtArgs>>): Prisma.Prisma__LocationPingClient<runtime.Types.Result.GetResult<Prisma.$LocationPingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one LocationPing that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {LocationPingFindUniqueOrThrowArgs} args - Arguments to find a LocationPing
   * @example
   * // Get one LocationPing
   * const locationPing = await prisma.locationPing.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends LocationPingFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, LocationPingFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__LocationPingClient<runtime.Types.Result.GetResult<Prisma.$LocationPingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first LocationPing that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LocationPingFindFirstArgs} args - Arguments to find a LocationPing
   * @example
   * // Get one LocationPing
   * const locationPing = await prisma.locationPing.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends LocationPingFindFirstArgs>(args?: Prisma.SelectSubset<T, LocationPingFindFirstArgs<ExtArgs>>): Prisma.Prisma__LocationPingClient<runtime.Types.Result.GetResult<Prisma.$LocationPingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first LocationPing that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LocationPingFindFirstOrThrowArgs} args - Arguments to find a LocationPing
   * @example
   * // Get one LocationPing
   * const locationPing = await prisma.locationPing.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends LocationPingFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, LocationPingFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__LocationPingClient<runtime.Types.Result.GetResult<Prisma.$LocationPingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more LocationPings that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LocationPingFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all LocationPings
   * const locationPings = await prisma.locationPing.findMany()
   * 
   * // Get first 10 LocationPings
   * const locationPings = await prisma.locationPing.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const locationPingWithIdOnly = await prisma.locationPing.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends LocationPingFindManyArgs>(args?: Prisma.SelectSubset<T, LocationPingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LocationPingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a LocationPing.
   * @param {LocationPingCreateArgs} args - Arguments to create a LocationPing.
   * @example
   * // Create one LocationPing
   * const LocationPing = await prisma.locationPing.create({
   *   data: {
   *     // ... data to create a LocationPing
   *   }
   * })
   * 
   */
  create<T extends LocationPingCreateArgs>(args: Prisma.SelectSubset<T, LocationPingCreateArgs<ExtArgs>>): Prisma.Prisma__LocationPingClient<runtime.Types.Result.GetResult<Prisma.$LocationPingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many LocationPings.
   * @param {LocationPingCreateManyArgs} args - Arguments to create many LocationPings.
   * @example
   * // Create many LocationPings
   * const locationPing = await prisma.locationPing.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends LocationPingCreateManyArgs>(args?: Prisma.SelectSubset<T, LocationPingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many LocationPings and returns the data saved in the database.
   * @param {LocationPingCreateManyAndReturnArgs} args - Arguments to create many LocationPings.
   * @example
   * // Create many LocationPings
   * const locationPing = await prisma.locationPing.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many LocationPings and only return the `id`
   * const locationPingWithIdOnly = await prisma.locationPing.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends LocationPingCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, LocationPingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LocationPingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a LocationPing.
   * @param {LocationPingDeleteArgs} args - Arguments to delete one LocationPing.
   * @example
   * // Delete one LocationPing
   * const LocationPing = await prisma.locationPing.delete({
   *   where: {
   *     // ... filter to delete one LocationPing
   *   }
   * })
   * 
   */
  delete<T extends LocationPingDeleteArgs>(args: Prisma.SelectSubset<T, LocationPingDeleteArgs<ExtArgs>>): Prisma.Prisma__LocationPingClient<runtime.Types.Result.GetResult<Prisma.$LocationPingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one LocationPing.
   * @param {LocationPingUpdateArgs} args - Arguments to update one LocationPing.
   * @example
   * // Update one LocationPing
   * const locationPing = await prisma.locationPing.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends LocationPingUpdateArgs>(args: Prisma.SelectSubset<T, LocationPingUpdateArgs<ExtArgs>>): Prisma.Prisma__LocationPingClient<runtime.Types.Result.GetResult<Prisma.$LocationPingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more LocationPings.
   * @param {LocationPingDeleteManyArgs} args - Arguments to filter LocationPings to delete.
   * @example
   * // Delete a few LocationPings
   * const { count } = await prisma.locationPing.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends LocationPingDeleteManyArgs>(args?: Prisma.SelectSubset<T, LocationPingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more LocationPings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LocationPingUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many LocationPings
   * const locationPing = await prisma.locationPing.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends LocationPingUpdateManyArgs>(args: Prisma.SelectSubset<T, LocationPingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more LocationPings and returns the data updated in the database.
   * @param {LocationPingUpdateManyAndReturnArgs} args - Arguments to update many LocationPings.
   * @example
   * // Update many LocationPings
   * const locationPing = await prisma.locationPing.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more LocationPings and only return the `id`
   * const locationPingWithIdOnly = await prisma.locationPing.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends LocationPingUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, LocationPingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LocationPingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one LocationPing.
   * @param {LocationPingUpsertArgs} args - Arguments to update or create a LocationPing.
   * @example
   * // Update or create a LocationPing
   * const locationPing = await prisma.locationPing.upsert({
   *   create: {
   *     // ... data to create a LocationPing
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the LocationPing we want to update
   *   }
   * })
   */
  upsert<T extends LocationPingUpsertArgs>(args: Prisma.SelectSubset<T, LocationPingUpsertArgs<ExtArgs>>): Prisma.Prisma__LocationPingClient<runtime.Types.Result.GetResult<Prisma.$LocationPingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of LocationPings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LocationPingCountArgs} args - Arguments to filter LocationPings to count.
   * @example
   * // Count the number of LocationPings
   * const count = await prisma.locationPing.count({
   *   where: {
   *     // ... the filter for the LocationPings we want to count
   *   }
   * })
  **/
  count<T extends LocationPingCountArgs>(
    args?: Prisma.Subset<T, LocationPingCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], LocationPingCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a LocationPing.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LocationPingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends LocationPingAggregateArgs>(args: Prisma.Subset<T, LocationPingAggregateArgs>): Prisma.PrismaPromise<GetLocationPingAggregateType<T>>

  /**
   * Group by LocationPing.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LocationPingGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends LocationPingGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: LocationPingGroupByArgs['orderBy'] }
      : { orderBy?: LocationPingGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, LocationPingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLocationPingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the LocationPing model
 */
readonly fields: LocationPingFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for LocationPing.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__LocationPingClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the LocationPing model
 */
export interface LocationPingFieldRefs {
  readonly id: Prisma.FieldRef<"LocationPing", 'String'>
  readonly userId: Prisma.FieldRef<"LocationPing", 'String'>
  readonly latitude: Prisma.FieldRef<"LocationPing", 'Float'>
  readonly longitude: Prisma.FieldRef<"LocationPing", 'Float'>
  readonly timestamp: Prisma.FieldRef<"LocationPing", 'DateTime'>
}
    

// Custom InputTypes
/**
 * LocationPing findUnique
 */
export type LocationPingFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LocationPing
   */
  select?: Prisma.LocationPingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LocationPing
   */
  omit?: Prisma.LocationPingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LocationPingInclude<ExtArgs> | null
  /**
   * Filter, which LocationPing to fetch.
   */
  where: Prisma.LocationPingWhereUniqueInput
}

/**
 * LocationPing findUniqueOrThrow
 */
export type LocationPingFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LocationPing
   */
  select?: Prisma.LocationPingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LocationPing
   */
  omit?: Prisma.LocationPingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LocationPingInclude<ExtArgs> | null
  /**
   * Filter, which LocationPing to fetch.
   */
  where: Prisma.LocationPingWhereUniqueInput
}

/**
 * LocationPing findFirst
 */
export type LocationPingFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LocationPing
   */
  select?: Prisma.LocationPingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LocationPing
   */
  omit?: Prisma.LocationPingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LocationPingInclude<ExtArgs> | null
  /**
   * Filter, which LocationPing to fetch.
   */
  where?: Prisma.LocationPingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of LocationPings to fetch.
   */
  orderBy?: Prisma.LocationPingOrderByWithRelationInput | Prisma.LocationPingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for LocationPings.
   */
  cursor?: Prisma.LocationPingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` LocationPings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` LocationPings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of LocationPings.
   */
  distinct?: Prisma.LocationPingScalarFieldEnum | Prisma.LocationPingScalarFieldEnum[]
}

/**
 * LocationPing findFirstOrThrow
 */
export type LocationPingFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LocationPing
   */
  select?: Prisma.LocationPingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LocationPing
   */
  omit?: Prisma.LocationPingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LocationPingInclude<ExtArgs> | null
  /**
   * Filter, which LocationPing to fetch.
   */
  where?: Prisma.LocationPingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of LocationPings to fetch.
   */
  orderBy?: Prisma.LocationPingOrderByWithRelationInput | Prisma.LocationPingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for LocationPings.
   */
  cursor?: Prisma.LocationPingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` LocationPings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` LocationPings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of LocationPings.
   */
  distinct?: Prisma.LocationPingScalarFieldEnum | Prisma.LocationPingScalarFieldEnum[]
}

/**
 * LocationPing findMany
 */
export type LocationPingFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LocationPing
   */
  select?: Prisma.LocationPingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LocationPing
   */
  omit?: Prisma.LocationPingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LocationPingInclude<ExtArgs> | null
  /**
   * Filter, which LocationPings to fetch.
   */
  where?: Prisma.LocationPingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of LocationPings to fetch.
   */
  orderBy?: Prisma.LocationPingOrderByWithRelationInput | Prisma.LocationPingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing LocationPings.
   */
  cursor?: Prisma.LocationPingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` LocationPings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` LocationPings.
   */
  skip?: number
  distinct?: Prisma.LocationPingScalarFieldEnum | Prisma.LocationPingScalarFieldEnum[]
}

/**
 * LocationPing create
 */
export type LocationPingCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LocationPing
   */
  select?: Prisma.LocationPingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LocationPing
   */
  omit?: Prisma.LocationPingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LocationPingInclude<ExtArgs> | null
  /**
   * The data needed to create a LocationPing.
   */
  data: Prisma.XOR<Prisma.LocationPingCreateInput, Prisma.LocationPingUncheckedCreateInput>
}

/**
 * LocationPing createMany
 */
export type LocationPingCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many LocationPings.
   */
  data: Prisma.LocationPingCreateManyInput | Prisma.LocationPingCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * LocationPing createManyAndReturn
 */
export type LocationPingCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LocationPing
   */
  select?: Prisma.LocationPingSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the LocationPing
   */
  omit?: Prisma.LocationPingOmit<ExtArgs> | null
  /**
   * The data used to create many LocationPings.
   */
  data: Prisma.LocationPingCreateManyInput | Prisma.LocationPingCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LocationPingIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * LocationPing update
 */
export type LocationPingUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LocationPing
   */
  select?: Prisma.LocationPingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LocationPing
   */
  omit?: Prisma.LocationPingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LocationPingInclude<ExtArgs> | null
  /**
   * The data needed to update a LocationPing.
   */
  data: Prisma.XOR<Prisma.LocationPingUpdateInput, Prisma.LocationPingUncheckedUpdateInput>
  /**
   * Choose, which LocationPing to update.
   */
  where: Prisma.LocationPingWhereUniqueInput
}

/**
 * LocationPing updateMany
 */
export type LocationPingUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update LocationPings.
   */
  data: Prisma.XOR<Prisma.LocationPingUpdateManyMutationInput, Prisma.LocationPingUncheckedUpdateManyInput>
  /**
   * Filter which LocationPings to update
   */
  where?: Prisma.LocationPingWhereInput
  /**
   * Limit how many LocationPings to update.
   */
  limit?: number
}

/**
 * LocationPing updateManyAndReturn
 */
export type LocationPingUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LocationPing
   */
  select?: Prisma.LocationPingSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the LocationPing
   */
  omit?: Prisma.LocationPingOmit<ExtArgs> | null
  /**
   * The data used to update LocationPings.
   */
  data: Prisma.XOR<Prisma.LocationPingUpdateManyMutationInput, Prisma.LocationPingUncheckedUpdateManyInput>
  /**
   * Filter which LocationPings to update
   */
  where?: Prisma.LocationPingWhereInput
  /**
   * Limit how many LocationPings to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LocationPingIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * LocationPing upsert
 */
export type LocationPingUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LocationPing
   */
  select?: Prisma.LocationPingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LocationPing
   */
  omit?: Prisma.LocationPingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LocationPingInclude<ExtArgs> | null
  /**
   * The filter to search for the LocationPing to update in case it exists.
   */
  where: Prisma.LocationPingWhereUniqueInput
  /**
   * In case the LocationPing found by the `where` argument doesn't exist, create a new LocationPing with this data.
   */
  create: Prisma.XOR<Prisma.LocationPingCreateInput, Prisma.LocationPingUncheckedCreateInput>
  /**
   * In case the LocationPing was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.LocationPingUpdateInput, Prisma.LocationPingUncheckedUpdateInput>
}

/**
 * LocationPing delete
 */
export type LocationPingDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LocationPing
   */
  select?: Prisma.LocationPingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LocationPing
   */
  omit?: Prisma.LocationPingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LocationPingInclude<ExtArgs> | null
  /**
   * Filter which LocationPing to delete.
   */
  where: Prisma.LocationPingWhereUniqueInput
}

/**
 * LocationPing deleteMany
 */
export type LocationPingDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which LocationPings to delete
   */
  where?: Prisma.LocationPingWhereInput
  /**
   * Limit how many LocationPings to delete.
   */
  limit?: number
}

/**
 * LocationPing without action
 */
export type LocationPingDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LocationPing
   */
  select?: Prisma.LocationPingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LocationPing
   */
  omit?: Prisma.LocationPingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LocationPingInclude<ExtArgs> | null
}
